#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{prettyref}
\newrefformat{}{section~\ref{#1}}
\sloppy
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman newcent
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 0
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Sincerity Manual
\end_layout

\begin_layout Author
Version %VERSION%
\end_layout

\begin_layout Author
Main text written by Tal Liron
\end_layout

\begin_layout Standard
\noindent
\align center
Copyright 2011 by Three Crickets LLC.
\begin_inset Newline newline
\end_inset

This work is licensed under a
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License"
target "http://creativecommons.org/licenses/by-nc-sa/3.0/"

\end_inset

.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Why Sincerity?
\end_layout

\begin_layout Standard
The free software and open source movements have utterly changed how we
 develop new software.
 Though freely available libraries had existed before, these movements have
 created a culture of sharing and viable business models that have cultivated
 an unprecedented wealth of solutions.
 For any problem you encounter in your everyday development work, there
 is likely a library out there that you can download for free.
 Your mileage may vary, as they say: quality may not always be up to snuff,
 and no warranty is provided, but the source code is included and you can
 make it better, for yourself and for others.
 Importantly, it's relatively worry-free to invest in free software: you
 can be certain that your license to use the library will not be revoked
 and that bugs 
\emph on
could
\emph default
 be solved.
\end_layout

\begin_layout Standard
(Of course, you do need to worry whether the software breaks any owned patents,
 but that problem exists for any software, whether it's free or proprietary,
 from a third party or developed by you.)
\end_layout

\begin_layout Subsubsection
Lather, Rinse, Repeat
\end_layout

\begin_layout Subsubsection
Reinventing Wheels
\end_layout

\begin_layout Standard
It's fine and good that we can choose our wheels.
 But can't we at least lest the best practices roll? Design your car so
 that it will fit the standard wheels, and let the more particular users
 replace the standards with something more specific.
\end_layout

\begin_layout Subsubsection
DLL Hell
\end_layout

\begin_layout Standard
OSGi is a decent solution, but boy is it intricate.
\end_layout

\begin_layout Subsubsection
Goal 1: Self-Containment
\end_layout

\begin_layout Subsubsection
Goal 2: Fun
\end_layout

\begin_layout Subsubsection
Comparison with Maven
\end_layout

\begin_layout Standard
Not fun.
\end_layout

\begin_layout Subsubsection
Comparison with OSGi
\end_layout

\begin_layout Standard
There are more straightforward solutions to DLL hell.
\end_layout

\begin_layout Section
Tutorial
\end_layout

\begin_layout Subsection
Part 1: One-Line Wonders
\end_layout

\begin_layout Standard
Install Python, install a library, and run a script
\end_layout

\begin_layout Standard
Create a web server, just like that.
\end_layout

\begin_layout Subsection
Part 2: Graphical User Interface
\end_layout

\begin_layout Subsection
Part 3: Containers
\end_layout

\begin_layout Subsection
Part 4: Get with the Program
\end_layout

\begin_layout Standard
Execute JavaScript code in the container
\end_layout

\begin_layout Standard
Compile and execute Java code in the container
\end_layout

\begin_layout Standard
Ruby, Groovy, etc.
\end_layout

\begin_layout Subsection
Part 5: Skeletons in the Closet
\end_layout

\begin_layout Section
Basic Concepts
\end_layout

\begin_layout Subsection
Container
\end_layout

\begin_layout Standard
A set of files implementing a self-contained JVM-based execution environment
 managed by Sincerity and by you.
 The container has a root path, under which it may have a directory structure
 of any depth.
 Libraries, binary executables, configuration files, temporary work files
 and logs are all by default stored within the container.
\end_layout

\begin_layout Standard
Why such an emphasis on self-containment? One goal is for the container
 to be deployable anywhere as a whole, simply by copying the directory elsewhere.
 Another goal is for the container to be a useful playground: you can install
 and try out various applications and libraries without affecting your operating
 system.
 You can undo you work simply by deleting the container's directory.
\end_layout

\begin_layout Subsection
Dependency
\end_layout

\begin_layout Standard
A contained, versioned, installable set of files (called 
\begin_inset Quotes eld
\end_inset

artifacts
\begin_inset Quotes erd
\end_inset

), which can in turn have its own list of dependencies.
 Dependencies are deployable software bundles, representing things like
 libraries, or complete applications and services.
\end_layout

\begin_layout Standard
All dependencies in Sincerity are identified by a two-part name, composed
 of a 
\begin_inset Quotes eld
\end_inset

group
\begin_inset Quotes erd
\end_inset

 prefix plus a unique 
\begin_inset Quotes eld
\end_inset

name
\begin_inset Quotes erd
\end_inset

 within the group, plus a version specifier.
 Different dependencies might have their own versioning schemes, but Sincerity
 is good at guessing these for the purposes of comparing versions.
\end_layout

\begin_layout Standard
Note that a dependency can also have none of its own files, and only a list
 of its own dependencies.
 These are sometimes called 
\begin_inset Quotes eld
\end_inset

meta-dependencies.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
Artifact
\end_layout

\begin_layout Standard
A fancy way to refer to files within a dependency.
 Sincerity supports a specific set of artifact types: JVM libraries (jars),
 language-specific libraries (Python eggs, Ruby gems, PHP packages, etc.),
 documentation bundles, source code bundles, software licenses, installers,
 dependency descriptors and more generic 
\begin_inset Quotes eld
\end_inset

packages
\begin_inset Quotes erd
\end_inset

 (see below).
 
\end_layout

\begin_layout Subsection
Package
\end_layout

\begin_layout Standard
This is a special kind of Sincerity-specific jar artifact that can contain
 other files, and can additionally have special install/uninstall hooks.
\end_layout

\begin_layout Standard
On the one hand, it is the most straightforward artifact type, as it simply
 installs any number of files into a container.
 On the other hand, it is the most flexible, as the hooks let packages intervene
 in arbitrary way in the installation process.
 A common use case is for the install hook to manipulate the unpacked files
 in order to tailor them for the specific environment in which the container
 is running.
\end_layout

\begin_layout Standard
Sincerity contains tools to help you easily create your own packages, as
 well as documentation about the package specification, so that you can
 manually create your own.
 
\end_layout

\begin_layout Subsection
Repository
\end_layout

\begin_layout Standard
A store for dependencies and their artifacts.
 Repositories usually contain indexes of available dependencies and versions.
 Some repositories also have friendly human-facing web frontends which you
 can use to search for dependencies.
\end_layout

\begin_layout Standard
Sincerity supports several repository technologies, and can also help you
 deploy your own dependencies to them.
 
\end_layout

\begin_layout Subsection
Shortcut
\end_layout

\begin_layout Subsection
Plugin
\end_layout

\begin_layout Subsection
Skeleton
\end_layout

\begin_layout Subsection
Template
\end_layout

\begin_layout Section
Containers
\end_layout

\begin_layout Subsection
Structure
\end_layout

\begin_layout Standard
A strict structure, non-negotiable, non-configurable.
 Use symbolic links to get away from it.
\end_layout

\begin_layout Subsubsection
/programs/
\end_layout

\begin_layout Subsubsection
/logs/
\end_layout

\begin_layout Subsubsection
/cache/
\end_layout

\begin_layout Subsubsection
/configuration/
\end_layout

\begin_layout Subsubsection
/libraries/
\end_layout

\begin_layout Subsubsection
/reference/
\end_layout

\begin_layout Section
Commands
\end_layout

\begin_layout Section
The GUI
\end_layout

\begin_layout Section
Templates
\end_layout

\begin_layout Section
Repositories
\end_layout

\begin_layout Section
Packages
\end_layout

\begin_layout Subsection
Skeletons
\end_layout

\begin_layout Subsection
Installers and Uninstallers
\end_layout

\begin_layout Section
Shortcuts
\end_layout

\begin_layout Standard
/configuration/sincerity/shortcuts.conf
\end_layout

\begin_layout Section
Built-In Plugins
\end_layout

\begin_layout Section
Custom Plugins
\end_layout

\begin_layout Standard
Creating your own
\end_layout

\begin_layout Section
Integration with Version Control Systems
\end_layout

\begin_layout Standard
git, Mercurial, Bazaar, Subversion
\end_layout

\begin_layout Section
The Sincerity Ecosystem
\end_layout

\begin_layout Subsection
Plugins
\end_layout

\begin_layout Subsubsection
Built-In Plugins
\end_layout

\begin_layout Subsubsection
Programming Language Plugins
\end_layout

\begin_layout Paragraph
JavaScript
\end_layout

\begin_layout Paragraph
Python
\end_layout

\begin_layout Paragraph
Ruby
\end_layout

\begin_layout Paragraph
PHP
\end_layout

\begin_layout Paragraph
Groovy
\end_layout

\begin_layout Paragraph
Clojure
\end_layout

\begin_layout Paragraph
Scala
\end_layout

\begin_layout Subsubsection
The Logging Plugin
\end_layout

\begin_layout Standard
/configuration/logging.conf
\end_layout

\begin_layout Subsubsection
The Wrapper Plugin
\end_layout

\begin_layout Subsubsection
Community Plugins
\end_layout

\begin_layout Subsection
Skeletons
\end_layout

\begin_layout Standard
You've most likely come to Sincerity for the skeletons: they provide the
 easiest way to get started with all kinds of frameworks, servers and libraries,
 while Sincerity lets you easily add more features, more libraries and more
 languages as your project grows.
\end_layout

\begin_layout Subsubsection
Web Server
\end_layout

\begin_layout Standard
Need a web server for static files? No problem:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity install jetty.web
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Jetty is a very robust, modular web server with excellent asynchronous performan
ce, and lots of features and extensions.
 With this skeleton we've provided you with the lightweight, bare minimum
 dependencies to serve just static files for a single web site.
\end_layout

\begin_layout Standard
To start you server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start jetty
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default port is 8080, so point your browser to http://localhost:8080
 to see the default welcoming page.
\end_layout

\begin_layout Standard
Jetty allows for much more sophistication than just serving a single web
 site, and for that we've provided a separate skeleton: 
\begin_inset Quotes eld
\end_inset

jetty.servlet
\begin_inset Quotes erd
\end_inset

.
 That skeleton supports multiple 
\begin_inset Quotes eld
\end_inset

contexts
\begin_inset Quotes erd
\end_inset

 under the server, as well as configuration of connectors, and of course
 servlets and web applications packaged as WAR files.
\end_layout

\begin_layout Standard
Additionally, Jetty is a recommended connector for Restlet.
 It's available as 
\begin_inset Quotes eld
\end_inset

restlet.jetty
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Paragraph
Fleshing Out
\end_layout

\begin_layout Standard
Just put your files under the container's 
\begin_inset Quotes eld
\end_inset

/web/
\begin_inset Quotes erd
\end_inset

 directory, using the usual rules for web servers: URLs are mapped to file
 paths under 
\begin_inset Quotes eld
\end_inset

/web/
\begin_inset Quotes erd
\end_inset

, and directory URLs are mapped to 
\begin_inset Quotes eld
\end_inset

index.html
\begin_inset Quotes erd
\end_inset

 files in that directory.
 MIME types are automatically guessed according to the common filename extension
s.
\end_layout

\begin_layout Standard
You can configure the server by editing 
\begin_inset Quotes eld
\end_inset

/programs/jetty.js
\begin_inset Quotes erd
\end_inset

.
 For example, you can change the port, add an SSL connector (for https URLs)
 and configure new MIME types.
\end_layout

\begin_layout Paragraph
Extras
\end_layout

\begin_layout Standard
Two plugins are strongly recommended: logging and service.
 To install them:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity install logging : install service
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following command will install a web server with the recommended plugins
 into a Sincerity container created in the current directory, and then start
 it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create web : install jetty.web : install logging : install service
 : service jetty start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use web : service jetty stop
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Servlet
\end_layout

\begin_layout Standard
Servlets let you generate dynamic content for a web site, usually using
 the Java language.
 There is a very large ecosystem of free servlets out there, including complete
 frameworks, that can help you develop dynamic applications.
\end_layout

\begin_layout Standard
To install a barebones servlet skeleton, based on Jetty:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity install jetty.servlet
\end_layout

\end_inset

To start you server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start jetty
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default port is 8080, so point your browser to http://localhost:8080.
 But, you won't see anything yet: this is a barebones skeleton waiting for
 you to add your application.
 You might want to start with 
\begin_inset Quotes eld
\end_inset

jetty.servlet.example
\begin_inset Quotes erd
\end_inset

 first.
\end_layout

\begin_layout Standard
As useful as servlets are, we recommend you take a look at the 
\begin_inset Quotes eld
\end_inset

restlet
\begin_inset Quotes erd
\end_inset

 skeleton if you want to build a dynamic web application in Java.
 And Restlet can use Jetty as its underlying connector.
\end_layout

\begin_layout Standard
And why stop there? Prudence (the 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 skeleton) builds on Restlet, letting you do all of that with your choice
 of JavaScript, Python, Ruby, PHP, Groovy or Clojure.
\end_layout

\begin_layout Paragraph
Fleshing Out
\end_layout

\begin_layout Standard
Jetty's official distribution (which doesn't rely on Sincerity...
 yet) is a perfect example of why Sincerity needs to exist.
 
\begin_inset Quotes eld
\end_inset

Official Jetty
\begin_inset Quotes erd
\end_inset

 is a morass of XML files that effectively duplicate what a lightweight
 scripting language, like JavaScript does far more comprehensibly and with
 far greater power.
 If you're switching from 
\begin_inset Quotes eld
\end_inset

Official Jetty,
\begin_inset Quotes erd
\end_inset

 then you're in for a treat, as well as a sigh of relief.
\end_layout

\begin_layout Paragraph
Extras
\end_layout

\begin_layout Standard
A nice example of a Jetty server with multiple contexts is provided: a static
 web server, a servlet container, and a web application installed as a WAR
 file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity install jetty.servlet.example
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(You can install this on its own, and it will pull in the basic skeleton
 as a dependency.)
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

/server/contexts/servlet-example/
\begin_inset Quotes erd
\end_inset

 is most elaborate: it shows you how you can drop in Java source code for
 your servlets and have them compiled as the server starts.
\end_layout

\begin_layout Standard
Additionally, two plugins are strongly recommended: logging and service.
 To install them:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity install logging : install service
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following command will install the servlet examples with the recommended
 plugins into a Sincerity container created in the current directory, and
 then start it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create servlet : install jetty.servlet.example : install logging
 : install service : service jetty start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use servlet : service jetty stop
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Restlet
\end_layout

\begin_layout Standard
Restlet lets you dynamically generate web content, but it goes beyond just
 responding to client requests: it lets you map RESTful resources to URIs,
 while abstracting away the tricky HTTP mechanics involved (content negotiation,
 conditional HTTP) and providing rich tools for routing, filtering and data.
\end_layout

\begin_layout Standard
Restlet, on its own, requires Java, but Prudence (the 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 skeleton) builds on Restlet, letting you do all of that with your choice
 of JavaScript, Python, Ruby, PHP, Groovy or Clojure.
\end_layout

\begin_layout Standard
To install the minimal skeleton:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity install restlet
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To start you server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start restlet
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default port is 8080, so point your browser to http://localhost:8080.
\end_layout

\begin_layout Paragraph
Fleshing Out
\end_layout

\begin_layout Standard
While Restlet requires you to write your resources in Java (see Prudence
 for an alternative that supports other languages), there is no reason for
 your bootstrapping code---the code that assembles your component, servers,
 clients, hosts and routes---to be so rigid.
 Restlet ships as a library, not as a deployable.
 The API for boostrapping your component is simple and elegant, but normally
 you would have to access it in Java.
\end_layout

\begin_layout Standard
JavaScript, Sincerity's natural language, provides a much more lightweight
 solution, and one that does not require you to recompile anything when
 all you want to change is your configuration.
 Of course, once your component is up and running, JavaScript plays no more
 role.
 (We mention that in case you're worried about performance, though you shouldn't
 be: the language engine is likely not the source of any bottlenecks in
 your application's performance.
 If you're ready to leave Java behind, take a look at the Prudence skeleton.)
\end_layout

\begin_layout Paragraph
Extras
\end_layout

\begin_layout Standard
A simple example Restlet application, with a custom resource as well as
 static content:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity install restlet.example
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(You can install this on its own, and it will pull in the basic skeleton
 as a dependency.)
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

/component/applications/example/
\begin_inset Quotes erd
\end_inset

 shows you how you can drop in Java source code for your resources and have
 them compiled as the component starts.
\end_layout

\begin_layout Standard
Additionally, two plugins are strongly recommended: logging and service.
 To install them:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity install logging : install service
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following command will install the Restlet example with the recommended
 plugins into a Sincerity container created in the current directory, and
 then start it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create restlet : install restlet.example : install logging : install
 service : service restlet start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use restlet : service restlet stop
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Prudence
\end_layout

\begin_layout Subsubsection
The Savory Framework
\end_layout

\begin_layout Standard
The Savory Framework lets you develop scalable data-driven web applications
 in server-side JavaScript, centering on MongoDB as its data provider and
 Prudence as its RESTful base.
 It features strong integration with client-side 
\begin_inset Quotes eld
\end_inset

AJAX,
\begin_inset Quotes erd
\end_inset

 notably Ext JS and Sencha Touch, and clean-room integration with Facebook,
 Twitter, Google, etc..
 Services include a scalable email notification system, robust sitemap generatio
n (with special support for 
\emph on
very 
\emph default
large sites), authentication and authorization, and support for several
 markup languages.
\end_layout

\begin_layout Standard
(Like Sincerity and Prudence, the Savory Framework is developed by Three
 Crickets.
 The three products form a powerful stack!)
\end_layout

\begin_layout Subsubsection
Django
\end_layout

\begin_layout Standard
Django is a popular web development framework for Python.
 It relies on a traditional MVC approach and relational database stores
 (MySQL, Postgres).
 Django enjoys a strong ecosystem of drop-in features and snippets, but
 also provides a lot of features right in the box.
\end_layout

\begin_layout Standard
There are many advantages in running Django on the JVM, instead of the CPython
 reference platform: much improved scalability (there is no GIL in Jython),
 as well as access to any JVM library 
\emph on
in addition 
\emph default
to Python libraries.
 Of course, Sincerity makes it extremely easy and transparent to add both
 kinds of libraries as dependencies.
\end_layout

\begin_layout Standard
Django can be difficult to install and get running on Jython, but of course
 it's trivial with Sincerity.
 To install it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity install django
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will pull in the 
\begin_inset Quotes eld
\end_inset

python
\begin_inset Quotes erd
\end_inset

 plugin as a dependency, so you don't need to anything else to get started
 with Django.
\end_layout

\begin_layout Standard
To start you server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start django
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default port is 8000, so point your browser to http://localhost:8000.
\end_layout

\begin_layout Paragraph
Fleshing Out
\end_layout

\begin_layout Subsubsection
Game
\end_layout

\begin_layout Standard
The JVM is growing in popularity as a platform for game designers, due to
 its ability to easily work on many operating systems, as well as in browsers.
 Much of this growth is due to the excellent LWJGL library: it makes easy
 to use advanced native features, such as 3D graphics, 3D sound, and to
 accept input from gaming controllers.
 While it does rely on native extensions to the JVM, they are supported
 on Linux, Windows, Mac OS X and Solaris.
\end_layout

\begin_layout Standard
The author's favorite game, Minecraft, is based on it.
\end_layout

\begin_layout Standard
To install the barebones skeleton:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity install lwjgl
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To start you game:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start lwjgl
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This will detect your operating system, install the relevant native binaries
 into the container (if they aren't already installed), and then start your
 game...
 except that with this barebones skeleton, there is no game.
 For sometimes to play with, see the 
\begin_inset Quotes eld
\end_inset

lwjgl.example
\begin_inset Quotes erd
\end_inset

 skeleton.
\end_layout

\begin_layout Paragraph
Fleshing Out
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

/programs/game.js
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Subsection
Shortcuts
\end_layout

\begin_layout Subsection
Repositories
\end_layout

\begin_layout Subsubsection
The Three Crickets Repository
\end_layout

\begin_layout Subsubsection
Maven Repositories
\end_layout

\begin_layout Subsubsection
Python and PyPI
\end_layout

\begin_layout Subsubsection
Ruby and Gems
\end_layout

\begin_layout Subsubsection
PHP and PEAR
\end_layout

\begin_layout Subsubsection
Community Repositories
\end_layout

\begin_layout Section
Appendix: Specifications
\end_layout

\begin_layout Subsection
Repositories
\end_layout

\begin_layout Subsection
Packages
\end_layout

\end_body
\end_document
