#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{prettyref}
\newrefformat{}{section~\ref{#1}}
\sloppy
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 0
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
The Sincerity Manual
\end_layout

\begin_layout Author
Version @VERSION@
\begin_inset Newline newline
\end_inset

Main text written by Tal Liron
\end_layout

\begin_layout Standard
\noindent
\align center
Copyright 2011-2013 by Three Crickets LLC.
\begin_inset Newline newline
\end_inset

This work is licensed under a
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License"
target "http://creativecommons.org/licenses/by-nc-sa/3.0/"

\end_inset

.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
Sincerity is a tool for deploying, installing and bootstrapping software
 stacks on top of the JVM.
 It makes these tedious tasks easy, simple and fun.
\end_layout

\begin_layout Standard
From the user's perspective, Sincerity makes it easy to install complete
 products and stacks, or individual modules and libraries, into portable
 
\begin_inset Quotes eld
\end_inset

containers,
\begin_inset Quotes erd
\end_inset

 which are nothing more than straightforward file directories.
 According to your preferences and constraints, you can use either Sincerity's
 pretty GUI or the powerful CLI.
\end_layout

\begin_layout Standard
From the provider's perspective, Sincerity is distribution system: simply
 host your packages in a 
\begin_inset Quotes eld
\end_inset

repository
\begin_inset Quotes erd
\end_inset

 (a simple web site) and let Sincerity do the rest.
 Configuration and bootstrapping of applications is easily controlled via
 simple JavaScript code, and Sincerity's growing ecology of plugins makes
 it especially easy to add features such as centralized logging and robust
 daemons with surprisingly minimal fuss.
\end_layout

\begin_layout Subsection
What Sincerity Stands For
\end_layout

\begin_layout Standard
After using used Sincerity for a while, you'll wonder how you could ever
 have lived without it.
\end_layout

\begin_layout Standard
Indeed, Sincerity arrives after years of us having to repeat the same developmen
t and deployment tasks over and over again for every new project: download,
 unzip, copy, rename and configure, hopefully while staying organized as
 to dependencies and versions.
 Solutions like Maven create their own problems: 
\begin_inset Quotes eld
\end_inset

enterprise
\begin_inset Quotes erd
\end_inset

-style complexity, enormous XML configuration files, and a Java-centrism
 that is becoming a burden as more of us are developing for the JVM without
 Java.
\end_layout

\begin_layout Standard
We decided that enough was enough! Sincerity intends:
\end_layout

\begin_layout Enumerate
To simplify and unify the 
\series bold
installation
\series default
 of JVM applications, services and libraries.
 You should never have to download idiosyncratic distributions and read
 through pages of installation instructions.
 A simpler recipe should be enough.
\end_layout

\begin_layout Enumerate
To simplify and unify 
\series bold
deployment
\series default
 via the JVM.
 It seems that every application and service has its own set of bootstrapping
 scripts, service wrappers, logging configuration, directory structures,
 etc.
 We can't entirely smooth out the quirks, but we can make your deployment
 experience consistent.
\end_layout

\begin_layout Enumerate
To be 
\series bold
language agnostic
\series default
.
 The JVM is no longer the exclusive domain of Java.
 A rich ecosystem of languages has grown around it, and Sincerity lets you
 manage installation and deployment without ever having to write or think
 in Java if you don't want to.
\end_layout

\begin_layout Enumerate
To be 
\series bold
culturally agnostic
\series default
.
 The JVM is not the exclusive domain of enterprise applications.
 If you think and work like an agile technology startup, Sincerity is here
 for you.
\end_layout

\begin_layout Enumerate
To cultivate an 
\series bold
ecosystem
\series default
.
 Three Crickets, the company behind Sincerity, maintains a collection of
 quality plugins that do all the above, and the list keeps growing.
 Developing plugins is a piece of cake and you're strongly encouraged to
 develop your own using the straightforward API.
 The Sincerity Manual contains everything you need to know to get started.
\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Standard
Sincerity was born of many years of experience writing complex software
 for the JVM.
\end_layout

\begin_layout Standard
You can go ahead and just use it; it will feel quite natural and trivial.
 However, what follows is some of the more complicated impetus behind it,
 which may help you understand why a tool such as Sincerity became necessary.
\end_layout

\begin_layout Subsection
Lather, Rinse, Repeat
\end_layout

\begin_layout Standard
The free software and open source movements have utterly changed how we
 develop software.
\end_layout

\begin_layout Standard
Reusable libraries had existed freely before, but these movements have created
 a culture of sharing, fueled by viable business models, culminating in
 an unprecedented wealth of solutions.
 For any problem you encounter in your everyday development work there is
 likely a library out there to help you that you can download for free.
 
\begin_inset Quotes eld
\end_inset

Your mileage may vary,
\begin_inset Quotes erd
\end_inset

 as they say: quality may not always be up to snuff, and no warranty is
 provided, but the source code is included and you can make it better, for
 yourself and for others.
 Importantly, it's relatively future-proof to depend on free software: you
 can be certain that your license to use the library will not be revoked
 and that bugs 
\emph on
could
\emph default
 be solved, by you, by the community, or by hired help.
\end_layout

\begin_layout Standard
(You do need to worry whether the software breaks any owned patents, but
 that problem exists for any software, whether it's free or proprietary,
 from a third party or developed by you.)
\end_layout

\begin_layout Standard
This wealth of solutions also creates challenges.
 There are several packaging, versioning and delivery standards for libraries.
 And when it comes to platforms and frameworks, there is no standard way
 to deploy software on top of them.
 If your project is a composite of many of these, you will find yourself
 spending a lot of time making sense of these various schemes and integrating
 them into a system that is maintainable by you in the long run.
 And if your software is itself modular and redistributable, you will find
 yourself having to pick one of the many different methods, or inventing
 one of your own.
 So, when it comes down to it, while free software can save you a lot of
 time and effort in terms of development, you end up spending extra effort
 on integration and maintenance.
 Annoyingly, you'll find that much of this work is repetitive, unnecessarily
 so.
 If you're a programmer used to making code reusable, you'll may such repetitive
 work especially annoying.
 
\end_layout

\begin_layout Standard
When it comes to the JVM, a few products have been widely adopted that make
 some of this work easier.
 However, experience has shown them to have too small a scope: they solve
 very specific problems, but do not address the complete challenge.
 (See the 
\begin_inset Quotes eld
\end_inset

Comparisons with Other Solutions
\begin_inset Quotes erd
\end_inset

 section for an in-depth comparison of Sincerity to some of these existing
 solutions.) Additionally, since they are already a few years old, they predate
 the linguistic revolution that is happening in full force on the JVM: no
 longer is Java the only good choice for leveraging the platform.
 New and popular languages like Scala, Clojure and Groovy offer a new experience
 and culture, while Rhino, Jython, JRuby and Quercus bring popular languages
 and their paradigms to the JVM.
 Indeed, since version 7, the JVM has added support an opcode (invokedynamic)
 that cannot be normally generated by compiling Java language code: for
 the first time in its history, the JVM is made for languages that aren't
 Java.
\end_layout

\begin_layout Standard
With that in mind, Sincerity is designed from the ground up with multilingual
 support, which means that not only is knowledge of Java code never required,
 but also that the culture of dynamic languages and their standards are
 intrinsically supported: you can include dependencies from Ruby gems, Python's
 PyPI repository and PHP's PEAR repository.
 Moreover, Sincerity has standard plugins that make installing and working
 with these dynamic languages especially easy.
\end_layout

\begin_layout Standard
You might want to jump straight to the tutorial to see how it works, but
 you're also invited to stay here and look at some of the development and
 deployment tasks that Sincerity tackles.
\end_layout

\begin_layout Subsubsection
Dependency Management and 
\begin_inset Quotes eld
\end_inset

DLL hell
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
How do you get a library working with your application? Let's see:
\end_layout

\begin_layout Enumerate
Find the library's web site.
\end_layout

\begin_layout Enumerate
Look for the 
\begin_inset Quotes eld
\end_inset

download
\begin_inset Quotes erd
\end_inset

 button.
\end_layout

\begin_layout Enumerate
Download the latest version: note that you want to write down all versions
 of all libraries you are using, so that you can handle upgrades and possible
 conflicts.
\end_layout

\begin_layout Enumerate
Open the distribution archive: you want to be organized about this, so that
 you can find licenses, documentation, etc., later on.
\end_layout

\begin_layout Enumerate
You need to make put the jar in your classpath for the following environments:
\end_layout

\begin_deeper
\begin_layout Enumerate
Your development environment: you might also want to link source code and
 documentation if they are available in the distribution.
\end_layout

\begin_layout Enumerate
Your deployment environment: the application needs it to run, so you to
 need to somehow include the file in your bootstrapping script.
\end_layout

\begin_layout Enumerate
Your distribution, assuming you are distributing your application: this
 is optional, since you might decide not to include this dependency, and
 to have the users download and install it themselves.
\end_layout

\end_deeper
\begin_layout Enumerate
There might be configuration files (property files, XML, etc.)
\end_layout

\begin_deeper
\begin_layout Enumerate
You might need to make different versions of these for your different environmen
ts.
\end_layout

\begin_layout Enumerate
The configuration files might not be flexible enough for how your application
 runs, with too much assumed or hardcoded, so you will need to either:
\end_layout

\begin_deeper
\begin_layout Enumerate
Document this fact for the user to handle on their own.
\end_layout

\begin_layout Enumerate
Generate the configuration files during your application's bootstrapping
 process.
\end_layout

\begin_layout Enumerate
Patch the library to allow for the flexibility you require.
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Once in a while you want to check for upgrades, which might mean subscribing
 to an RSS feed or mailing list, or just reminding yourself to check the
 web site.
\end_layout

\begin_layout Enumerate
The library might have requirements, so you need to make sure to do all
 the above for them.
\end_layout

\begin_layout Standard
The above steps involve a lot of work.
 And what if you have 20 dependencies?
\end_layout

\begin_layout Standard
This is not a new problem, and there are already a few solutions for it.
 Firstly, there is a straightforward standard for JVM repositories, iBiblio/Mave
n, which is widely used by many projects.
 But it requires you to use one of two tools: Ivy, which does a good job
 of downloading dependencies (and is used internally by Sincerity), but
 does nothing else, or Maven, which is a sophisticated, heavyweight project
 management tool with a steep learning curve, and which requires you to
 work entirely within its domain.
 We'll compare these tools in more depth to Sincerity later on, but for
 now let's just say that the former is too limited in scope, and the latter
 too constraining.
 There are also various difficulties in configuring these tools: Sincerity
 
\begin_inset Quotes eld
\end_inset

just works,
\begin_inset Quotes erd
\end_inset

 immediately and easily, and also handles bootstrapping and assists in configura
tion.
\end_layout

\begin_layout Standard
There's also the problem of being forced in the JVM bubble: if you're using
 Jython, JRuby or Quercus, then you have to also work with the repository
 standards of Python (PyPI), Ruby (gems) and PHP (PEAR).
 Sincerity is designed to support all of these standards.
\end_layout

\begin_layout Standard
Then there's the issue of potential conflicts, a.k.a.
 
\begin_inset Quotes eld
\end_inset

DLL hell
\begin_inset Quotes erd
\end_inset

: What if one application you're working on requires one version of a specific
 library, and another application requires another? What if this happens
 within different parts of the same application? Again, there are standards
 and tools for this---OSGi and Jigsaw---but they require you to work entirely
 within the paradigms they enforce.
 Sincerity doesn't stop you from using them (in fact, it has great support
 for the Felix OSGi container), but definitely does not force you to play
 by any special rules.
 From the bottom up, Sincerity is designed to be as straightforward and
 universal as possible.
 See the detailed comparison to OSGi below for more information.
\end_layout

\begin_layout Subsubsection
Bootstrapping
\end_layout

\begin_layout Standard
The JVM is packaged as a set of command line utilities, plus a few plugins
 for specialized environments.
 It does come with one simple way to distribute programs---executable JAR
 files---but that would only suffice for the most trivial programs.
\end_layout

\begin_layout Standard
For anything more complex, you will need to handle bootstrapping your applicatio
n.
 This means, at the very least, finding the right JVM on the machine (more
 than one may be installed), and then loading the application via the 
\begin_inset Quotes eld
\end_inset

java
\begin_inset Quotes erd
\end_inset

 tool.
 Usually, however, it ends up being far more complicated: rummaging through
 environment variables, detecting the host operating system and environment
 in order to set specialized JVM flags and load optimized native libraries,
 and because this is so complex, you'll want to responding to specialized
 bootstrapping flags set by the user.
 Indeed, many JVM-based products won't 
\begin_inset Quotes eld
\end_inset

just run,
\begin_inset Quotes erd
\end_inset

 but will in fact require you to set a host of environment variables first.
\end_layout

\begin_layout Standard
All this work happens before the JVM even starts.
 Thus, it's usually handled by writing a shell script, which is almost always
 immediately runnable.
 Depending on how many operating systems you want to support, this may mean,
 at the very least, writing one for *nix systems and one for Windows systems.
 This is highly specialized work, and a development project with its own
 challenges, so some projects choose to avoid scripts and develop native
 binaries that handle bootstrapping.
 And then there are installer products that purport to do this all for you.
\end_layout

\begin_layout Standard
And what if you want the software to run as a daemon, system service, or
 cron job?
\end_layout

\begin_layout Standard
And what if your software is not just one program, but also contains a set
 of tools that you also need to bootstrap?
\end_layout

\begin_layout Standard
The bottom line is that bootstrapping is very hard to get right, and there
 are many complicated approaches to it.
 It's a shame that so many JVM products keep trying to implement the same
 bootstrapping solutions from scratch.
 Sincerity streamlines this in two ways: first, by providing you with working
 shell scripts, and second, by having these scripts delegate the process
 as soon as possible to a JavaScript program running in the JVM.
 Once on the JVM, Sincerity offers a range of installable plugins that handle
 various configuration and deployment tasks, including running the software
 as a daemon.
\end_layout

\begin_layout Standard
(Why JavaScript and not a different scripting language? We deal with the
 question in length below.)
\end_layout

\begin_layout Standard
What this means is that most products won't have to do anything beyond what
 Sincerity offers out of the box, and those with specialized bootstrapping
 will be able to write portable JavaScript programs, instead of having to
 deal with complex shell scripting.
\end_layout

\begin_layout Subsubsection
Configuration and 
\begin_inset Quotes eld
\end_inset

XML hell
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Between bootstrapping and reaching full usability, your product has to configure
 itself.
 Will you choose a properties file? XML? Something else? And where is the
 file located?
\end_layout

\begin_layout Standard
Well, consider that all the libraries you use had to make their own choices
 for configuration.
 A non-trivial JVM product could thus require several configuration files,
 in different locations, with different configuration rules.
\end_layout

\begin_layout Standard
But there's a more serious problem to most of these approaches: they are
 unnecessarily rigid and static.
 While there are many advantages to using text files for configuration,
 the choice of technologies is baffling.
 Possibly the worst choice is XML.
 This language, ostensibly a 
\begin_inset Quotes eld
\end_inset

markup
\begin_inset Quotes erd
\end_inset

 language, is marking up nothing when used for configuration: it's instead
 used as a cumbersome format for structured textual data.
 And it gets far, far worse: XML configuration files are often used 
\emph on
programatically
\emph default
 in the JVM world, to construct JVM classes and call JVM methods.
 The best known, worst offenders are log4j and Jetty.
 There, XML is used as if it were a scripting language, the clumsiest you
 have ever seen.
\end_layout

\begin_layout Standard
The use of XML for configuration is part of what we call 
\begin_inset Quotes eld
\end_inset

XML hell,
\begin_inset Quotes erd
\end_inset

 which refers to programmers being swamped with countless overly-verbose
 XML files.
 XML is also often abused as an interchange format on the Internet, and
 a descriptor format in much of the JVM enterprise industry.
 Enough already!
\end_layout

\begin_layout Standard
The excuse for this insanity, one would guess, is that the ability to parse
 XML is standard on many platforms, including the JVM.
 But, 
\emph on
interpreting 
\emph default
this XML is far more complicated that just parsing it.
 In essence, parsing a general-purpose XML for something like Jetty involves
 writing a complete (more likely, not complete enough) scripting language
 engine.
 Another excuse for 
\begin_inset Quotes eld
\end_inset

XML hell
\begin_inset Quotes erd
\end_inset

 could be part of the general over-enthusiasm with XML, and the untested
 faith that standardizing on a single format would lead to greater interoperabil
ity.
 Again, this is madness: unless you couple the XML file with the code that
 can make sense of it, the ability to parse them is of little use.
\end_layout

\begin_layout Standard
Another approach, better than XML, is to create a Domain-Specific Language
 (DSL).
 But DSLs require a lot of work, both by developers and by users who must
 learn them.
\end_layout

\begin_layout Standard
Sincerity is here to stop the madness: wherever possible, it standardizes
 on using JavaScript for configuration.
 (Why JavaScript? We deal with the question in length below.) With JavaScript
 you can instantiate objects, call methods, insert conditionals and loops
 using natural programming paradigms, instead of shoe-horning them into
 XML.
 At its simplest, a JavaScript configuration file can look identical to
 a simple properties file: straightforward assignments of values to configuratio
n parameters.
 But, you also have the option of injecting interpreted code where appropriate.
 And, of course, it's still just text files that don't need to be compiled,
 and can even be picked up and re-interpreted at runtime, so you're still
 absolutely within the 
\begin_inset Quotes eld
\end_inset

configuration-by-text-file
\begin_inset Quotes erd
\end_inset

 paradigm.
\end_layout

\begin_layout Standard
If you've never tried the 
\begin_inset Quotes eld
\end_inset

configuration-by-script
\begin_inset Quotes erd
\end_inset

 approach before, you might be skeptical about its benefits or worried about
 the extra weight it adds.
 But Sincerity's JavaScript engine is very lightweight, and we're convinced
 that once you try this approach, you will never want another.
 For an instructive example, install Sincerity's logging plugin, and take
 a look at the logging configuration files.
 Now compare them to the 
\begin_inset Quotes eld
\end_inset

official
\begin_inset Quotes erd
\end_inset

 log4j formats.
\end_layout

\begin_layout Standard
One consequence of this approach is that the line between bootstrapping
 and configuration gets blurred.
 They end up as one integrated phase: a bunch of JavaScript programs strapped
 together.
 This leads to both simplification and greater flexibility for you.
 This approach leads to exceptionally dynamic configuration systems that
 can adopt to any operating environment.
\end_layout

\begin_layout Standard
We really hope to see 
\begin_inset Quotes eld
\end_inset

configuration-by-script
\begin_inset Quotes erd
\end_inset

 used throughout the JVM world, even for projects that do not want to or
 cannot use Sincerity.
\end_layout

\begin_layout Subsubsection
Logging
\end_layout

\begin_layout Standard
The JVM has a few good, widely-used logging APIs, as well as a great glue
 library---SLF4J---that can bridge between them.
 But there's quite a bit of work involved in getting all these libraries
 working together.
 It seems that every JVM product has its own way of doing this.
 Logging is important, and can't be relegated to an afterthought: if it's
 not properly configured and well integrated, it's close to useless.
\end_layout

\begin_layout Standard
Sincerity takes logging very seriously: it provides a plugin that does much
 of the work for you, and extensions that further enhance logging.
 For example, one extension funnels all logs to a centralized MongoDB collection
, perfect for distributed cloud deployments.
 And this system will work with practically 
\emph on
any 
\emph default
JVM library.
\end_layout

\begin_layout Standard
Note that logging configuration is handled via the 
\begin_inset Quotes eld
\end_inset

configuration-by-script
\begin_inset Quotes erd
\end_inset

 approach mentioned above, and is well integrated with the whole ecology
 of Sincerity plugins.
\end_layout

\begin_layout Subsection
Why JavaScript?
\end_layout

\begin_layout Standard
There are many great scripting languages for the JVM.
 Note that by 
\begin_inset Quotes eld
\end_inset

scripting
\begin_inset Quotes erd
\end_inset

 here we mean that these languages are immediately runnable from the textual
 source code.
 This doesn't have to mean that they are 
\begin_inset Quotes eld
\end_inset

interpreted
\begin_inset Quotes erd
\end_inset

: many of these languages compile some or all of your code on-the-fly.
 So, why has Sincerity standardized on JavaScript, rather than Groovy, Scala,
 Clojure, Lua, Python, Ruby or others?
\end_layout

\begin_layout Standard
There's no single answer, but rather a combination of factors that make
 JavaScript attractive:
\end_layout

\begin_layout Enumerate
JavaScript is very well known.
 Since its original introduction into web browsers, and universal adoption
 as a web standard, it has gained an enormous skill share in the industry.
 There's a wealth of education material available for it.
\end_layout

\begin_layout Enumerate
Its implementations are relatively lightweight, in that JavaScript is both
 fairly minimal linguistically, and also does not have anything like a standard
 library, of the kind you would find in Python and Ruby.
 Thus the Rhino JavaScript engine, which Sincerity currently uses, allows
 Sincerity to have a much smaller footprint than if it were to use Jython,
 JRuby or even Groovy.
 Note that not having a standard library can also be seen as a disadvantage,
 but in the case of Sincerity it's dealt with in two ways:
\end_layout

\begin_deeper
\begin_layout Enumerate
Since we are running JavaScript on the JVM, we have full access to the Java
 standard library.
\end_layout

\begin_layout Enumerate
Sincerity comes with the 
\begin_inset Quotes eld
\end_inset

Sincerity Framework,
\begin_inset Quotes erd
\end_inset

 a very lightweight library, written in JavaScript, that makes working with
 JavaScript on the JVM a little bit easier.
\end_layout

\end_deeper
\begin_layout Enumerate
JavaScript is very future-proof: not only is it an open standard (where
 it's called 
\begin_inset Quotes eld
\end_inset

ECMAScript
\begin_inset Quotes erd
\end_inset

), but it will be baked into Oracle's JVM distribution from version 8, as
 the Nashorn engine.
 (Get it? 
\begin_inset Quotes eld
\end_inset

Nashorn
\begin_inset Quotes erd
\end_inset

 is German for 
\begin_inset Quotes eld
\end_inset

rhinoceros.
\begin_inset Quotes erd
\end_inset

) Nashorn will also make good use of the dynamicinvoke opcode introduced
 in version 7, promising especially good performance.
 Sincerity may very well migrate to Nashorn when it becomes available, or
 at least offer it as an option.
\end_layout

\begin_layout Enumerate
JavaScript is actually a 
\emph on
nice 
\emph default
language.
 It has been the target of a lot of negativity from programmers who had
 to work with it in browser environments, but we believe the fault is more
 of the environment (the browser DOM's poor API and many annoying differences
 between various browser implementations of it) than the language itself.
 It encourages prototype-oriented programming, which can easily emulate
 object-oriented programming, as well as other paradigms.
 In fact, JavaScript shares much of its scoping and function handling with
 Scheme, a language that is generally admired.
 You can think of it this way: JavaScript is Scheme with a C-like syntax.
\end_layout

\begin_layout Standard
Despite these 
\emph on
general
\emph default
 advantages, you might still prefer to use another scripting language for
 your own work.
 Luckily, Sincerity, with the help of the Scripturian library, will let
 you write plugins in Python, Ruby, Clojure, Groovy or PHP.
 The only disadvantage is that you would have to include the appropriate
 language engine as a dependency.
 In the interest of keeping Sincerity and its ecology of plugins lean and
 mean, we want to encourage the use of JavaScript for plugins that are intended
 to be shared with the community.
\end_layout

\begin_layout Standard
Just to be 100% clear: this preference for JavaScript only applies to Sincerity
 plugins, configuration scripts, and skeletons: you are definitely welcome
 to write your application in whatever language you choose.
 In fact, Sincerity contains great plugins for many popular JVM languages,
 as well as skeletons for complete language-specific frameworks, such as
 Django and Rails.
\end_layout

\begin_layout Subsubsection
JavaScript vs.
 Shell Scripting
\end_layout

\begin_layout Standard
This section is meant for those of you who are comfortable with shell scripting,
 and are wary about Sincerity's use of JavaScript for bootstrapping.
\end_layout

\begin_layout Enumerate
You might think that shell scripting would always be more portable than
 a scripting language running inside the JVM.
 But, think again: the point of your bootstrapping work is to get 
\emph on
into
\emph default
 the JVM, in order to run your application.
 If that doesn't work, then your whole application won't run, and portability
 is moot.
 Sincerity 
\emph on
does
\emph default
 have shell scripts, but they're designed to delegate to the JVM as soon
 as they can.
\end_layout

\begin_layout Enumerate
You might be concerned about startup delay: starting up the JVM with all
 the JavaScript engine classes is much slower than starting up a shell script.
 This is true, no doubt, but since version 7 the JVM is doing better.
 Also consider that you have to get into the JVM anyway for your application
 to do anything useful.
 Still, if your application has a lot of tools that do not always require
 the JVM, and would be adversely affected by the JavaScript bootstrap times,
 then by all means write them as shell scripts! You can use all of Sincerity's
 other features when you need them.
\end_layout

\begin_layout Enumerate
Shell scripts treat most of your program as an opaque, black box.
 But with JavaScript running in the JVM you can call parts of your API before
 the application truly starts.
 This can allow for much more powerful, dynamic bootstrapping.
\end_layout

\begin_layout Enumerate
JavaScript is likely richer than your shell language.
 Sure, bash 4.0 and PowerShell are a leap forward compared to what we had
 20 years ago, but they're still quite constricting.
\end_layout

\begin_layout Subsection
Comparisons with Other Solutions
\end_layout

\begin_layout Subsubsection
Sincerity vs.
 Maven
\end_layout

\begin_layout Standard
Maven is a comprehensive solution for managing Java projects, handling building,
 dependency management and distribution.
 It contrastingly combines a lot flexibility on the one hand---an open plugin
 API built on the Plexus IoC container---with deliberate rigidity on the
 other hand: a strict reactor-based, multi-phase cycle.
 In particular, Maven's design goes to great lengths to keep you from affecting
 the order of operations: you are supposed to configure your project, and
 let Maven decide what to do when.
 For those used to scripting their build process, this approach may initially
 seem baffling and restricting.
 However, there are significant benefits to this approach when working with
 very large, complex projects: instead of coding and maintaining nightmarishly
 long build scripts based on dozens of changing environment variables, you
 can sit back and let Maven analyze the entire operation and then do the
 right thing.
\end_layout

\begin_layout Standard
But, for this to work, you need to play by Maven's rules, and that's where
 things get tricky.
 Small deviations from the strict assumptions Maven makes throw you down
 the rabbit hole of plugins and hacks, as you struggle to shoe-horn a simple
 procedure into a product that abhors procedure.
 Specifically, Maven's ideal environment is one in which your versioned
 modules are written in Java mapped to single jar files.
 Anything even slightly different becomes painful and hacky.
\end_layout

\begin_layout Standard
Both Sincerity and Maven handle downloading dependencies, but other than
 this apparent overlap these products have different goals and scope.
 Importantly, they can be very complementary.
 One way to think of this is that Maven could come first and Sincerity come
 second: Maven could help you build your project and repositories, while
 Sincerity would handle your deployment container.
 Maven won't help you run your application: its output is jars of compiled
 code, source code or documentation, and it doesn't handle their bootstrapping
 or runtime configuration.
 On the other hand, Sincerity does not build your project, nor does it make
 any assumptions about how its built: you can use Maven, Ant or anything
 else.
\end_layout

\begin_layout Subsubsection
Sincerity vs.
 OSGi
\end_layout

\begin_layout Standard
An 
\begin_inset Quotes eld
\end_inset

interface
\begin_inset Quotes erd
\end_inset

 in the JVM lets you create a standard protocol, such that you can plug
 in various implementations of it---
\begin_inset Quotes eld
\end_inset

classes,
\begin_inset Quotes erd
\end_inset

 with 
\begin_inset Quotes eld
\end_inset

methods
\begin_inset Quotes erd
\end_inset

 as the entry points---at runtime.
 The protocol is enforced by the JVM, which will not let you plug in implementat
ions that do not fit the interface.
 OSGi takes this up a level, by providing a much broader concept of 
\begin_inset Quotes eld
\end_inset

implementation.
\begin_inset Quotes erd
\end_inset

 The implementation is a 
\begin_inset Quotes eld
\end_inset

bundle
\begin_inset Quotes erd
\end_inset

 that can contain any number of classes.
\end_layout

\begin_layout Standard
So far so good, but it gets complicated fast.
 OSGi takes it up one level more: the protocols are published and endorsed
 by a community of providers, with the idea that different providers (software
 vendors or departments in a large enterprise) can provide bundles to implement
 them, which would all work together perfectly.
 With this broader ambition, 
\begin_inset Quotes eld
\end_inset

DLL hell
\begin_inset Quotes erd
\end_inset

 suddenly becomes a far more malevolent enemy: bundles are often black boxes
 that you cannot easily patch to use a shared version of a dependency.
 There's thus a real need for a standard solution of runtime code compartmentali
zation, which OSGi provides via a clever system of classloaders.
\end_layout

\begin_layout Standard
\SpecialChar \ldots{}
Which, of course, introduces its own set of problems.
 To get its classloading scheme to work, OSGi requires strict separation
 of classloading between bundles, which in turn adds subtle and mischievous
 restrictions to your usual JVM work.
 This is not entirely bad: working within these limitations does encourage
 clean, sharp boundaries between your modules, and goes a long way towards
 reducing classloading confusion.
 It's not, however, trivial by any means, and all your bundles must be designed
 with this in mind for OSGi to work properly.
\end_layout

\begin_layout Standard
One very useful side effect of having the framework control classloading
 is that entire bundles can be loaded and unloaded during runtime.
 Indeed, OSGi defines protocols for starting, stopping and hotswapping services.
 This is a powerful feature in itself, and is indeed the entire motivation
 for using OSGi in some cases.
 (Though, if that's your reason, you might want to look at other, simpler
 ways to enable hotswapping, rather than embracing the whole of OSGi.)
\end_layout

\begin_layout Standard
It's worth noting, however, that there is a more straightforward solution
 to the problem of 
\begin_inset Quotes eld
\end_inset

DLL hell
\begin_inset Quotes erd
\end_inset

: Why not run each 
\begin_inset Quotes eld
\end_inset

bundle
\begin_inset Quotes erd
\end_inset

 as a separate process? Each JVM would load its own classes as necessary,
 and never will they mix or conflict.
 This makes a lot of sense if you're running a distributed system, since
 you're already dividing your software among many machines and processes,
 and indeed many parts of your application may not be JVM-based at all,
 and can't be run in a single process anyway.
 As for starting and stopping your 
\begin_inset Quotes eld
\end_inset

bundles,
\begin_inset Quotes erd
\end_inset

 the operating system already does a good job of managing processes, so
 you don't need OSGi's protocol for that.
 From this perspective, you can see that OSGi is, in effect, creating a
 virtual operating system 
\emph on
inside
\emph default
 the JVM, where 
\begin_inset Quotes eld
\end_inset

bundles
\begin_inset Quotes erd
\end_inset

 are very much like operating system processes.
\end_layout

\begin_layout Standard
Indeed, the original target environment for OSGi was precisely one in which
 all bundles ran in a single process, in shared memory space: it is the
 world of embedded computing, where the runtime is variously confined, such
 that you are either limited to a single process due to limited resources
 or security concerns.
 In such environments OSGi may be your only good solution for the problem
 of modularity and pluggable services.
 Still, OSGi has also proved popular in large enterprise environments, where
 it allows for modules to be treated more abstractly whether or not they
 are running in a single process.
\end_layout

\begin_layout Standard
Sincerity, in itself, takes the more straightforward approach: such high-level
 modularity is provided through the notion of 
\begin_inset Quotes eld
\end_inset

containers,
\begin_inset Quotes erd
\end_inset

 which you can easily create, clone and change, and start and stop as processes
 (the service plugin makes it especially easy to run them as daemons and
 services).
 Containers can then talk to each other (and to other services) using whatever
 technology is appropriate, be it REST, SOAP, message queuing, Hazelcast,
 etc.
 That said, OSGi may indeed be appropriate for your project, and Sincerity
 provides a nice Felix plugin to get you up and running.
 The point being that Sincerity was designed to be 
\emph on
neutral 
\emph default
to the technology
\emph on
 
\emph default
of modularity, introducing no special restrictions for users that do not
 need them.
\end_layout

\begin_layout Section
Getting Started
\end_layout

\begin_layout Subsection
Install Sincerity
\end_layout

\begin_layout Standard
You need a JVM, at least version 5.
\end_layout

\begin_layout Standard
If you're an Ubuntu user, then use our repository! It would do everything
 for you.
\end_layout

\begin_layout Standard
Otherwise, download the Sincerity distribution, unpack the folder, and put
 it in any standard location.
 Suggested locations:
\end_layout

\begin_layout Itemize
Unix: 
\begin_inset Quotes eld
\end_inset

/opt/sincerity
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Windows: 
\begin_inset Quotes eld
\end_inset

C:
\backslash
Program Files
\backslash
Sincerity
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
Mac OS X: 
\begin_inset Quotes eld
\end_inset

Applications
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
You can then run the 
\begin_inset Quotes eld
\end_inset

sincerity
\begin_inset Quotes erd
\end_inset

 script (Unix and Mac) from there or 
\begin_inset Quotes eld
\end_inset

sincerity.bat
\begin_inset Quotes erd
\end_inset

 (Windows).
\end_layout

\begin_layout Standard
You might want to add the Sincerity path to your system path, to allow for
 easy access from the command line.
\end_layout

\begin_layout Subsection
Working with the Command Line
\end_layout

\begin_layout Standard
If you run Sincerity without any command line options, it will default the
 Graphical User Interface (GUI).
 However, it's strongly recommended that you learn how to use the command
 line.
 Here are the main principles:
\end_layout

\begin_layout Enumerate
All Sincerity commands exist within 
\begin_inset Quotes eld
\end_inset

plugins.
\begin_inset Quotes erd
\end_inset

 The full name of a command is its plugin name, with a colon, and then the
 command name within the plugin.
 For example, 
\begin_inset Quotes eld
\end_inset

container:create
\begin_inset Quotes erd
\end_inset

 is the 
\begin_inset Quotes eld
\end_inset

create
\begin_inset Quotes erd
\end_inset

 command within the 
\begin_inset Quotes eld
\end_inset

container
\begin_inset Quotes erd
\end_inset

 plugin.
 Use 
\begin_inset Quotes eld
\end_inset

sincerity help
\begin_inset Quotes erd
\end_inset

 to list all available commands from all plugins.
 Many commands support command line arguments, both required and optional.
 See the command documentation for full details.
\end_layout

\begin_layout Enumerate
As a short form, you can use only the command name.
 However, this will only work if there is no ambiguity, meaning that the
 same command does not exist in more than one plugin.
 For example, 
\begin_inset Quotes eld
\end_inset

create
\begin_inset Quotes erd
\end_inset

 will be equivalent to 
\begin_inset Quotes eld
\end_inset

container:create
\begin_inset Quotes erd
\end_inset

 if no other plugin has a 
\begin_inset Quotes eld
\end_inset

create
\begin_inset Quotes erd
\end_inset

 command.
 Also note that the full form of the 
\begin_inset Quotes eld
\end_inset

help
\begin_inset Quotes erd
\end_inset

 command is 
\begin_inset Quotes eld
\end_inset

help:help
\begin_inset Quotes erd
\end_inset

.
 (Plugin developers are encouraged not to use command names that would conflict
 with the core plugin commands, such as 
\begin_inset Quotes eld
\end_inset

create
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

add
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

install
\begin_inset Quotes erd
\end_inset

, etc.)
\end_layout

\begin_layout Enumerate
Some Sincerity commands can only be run while pointing to a container.
 Generally, it's useful to run Sincerity when the current directory is somewhere
 in the container.
 There are a few rules to consider:
\end_layout

\begin_deeper
\begin_layout Enumerate
Sincerity can only point to one container at a time.
 
\end_layout

\begin_layout Enumerate
You can change the container or explicitly point to one using the 
\begin_inset Quotes eld
\end_inset

container:use
\begin_inset Quotes erd
\end_inset

 command.
\end_layout

\begin_layout Enumerate
Otherwise, Sincerity will attempt to find for a container in the following
 order:
\end_layout

\begin_deeper
\begin_layout Enumerate
The 
\begin_inset Quotes eld
\end_inset

sincerity.container.root
\begin_inset Quotes erd
\end_inset

 JVM property
\end_layout

\begin_layout Enumerate
The 
\begin_inset Quotes eld
\end_inset

SINCERITY_CONTAINER
\begin_inset Quotes erd
\end_inset

 environment variable
\end_layout

\begin_layout Enumerate
Search up filesystem tree from current path looking for a directory that
 has a 
\begin_inset Quotes eld
\end_inset

.sincerity
\begin_inset Quotes erd
\end_inset

 subdirectory
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Sincerity's current set of available plugins, which affects the set of available
 commands, is a combination of both the plugins available in the Sincerity
 installation 
\emph on
as well as
\emph default
 those available in the current container.
\end_layout

\begin_layout Enumerate
You can chain commands together using 
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset

.
 Command chains are used extensively in Sincerity.
\end_layout

\begin_deeper
\begin_layout Enumerate
Note that a single command chain can change the current container multiple
 times.
 For example:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use container1 : install : service start web-server : use container2
 : log "test log message"
\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Considering the above, note also that each time you switch container within
 a command chain the set of available plugins and commands changes, matching
 whatever is the current container at the time.
\end_layout

\begin_layout Enumerate
Also keep in mind that a single command chain is always run 
\emph on
within the same JVM
\emph default
.
 Sincerity achieves JVM classworld separation by swapping class loaders
 when it changes containers.
 If this behavior is not desired, you should avoid chaining and run your
 commands using separate 
\begin_inset Quotes eld
\end_inset

sincerity
\begin_inset Quotes erd
\end_inset

 command lines.
\end_layout

\end_deeper
\begin_layout Subsection
Working with the Graphical User Interface (GUI)
\end_layout

\begin_layout Standard
Sincerity has a Swing-based GUI that displays information about your container
 and lets you perform operations on it.
 It can be used instead of the CLI, though each interface has its own strengths.
 The GUI is especially useful for displaying data, such as the dependency
 tree structure.
\end_layout

\begin_layout Standard
Sincerity provides the GUI frame, but the contents are provided by plugins.
 This means that the whole GUI would look differently according to whatever
 is the current container and what plugins it has installed.
 For this reason, when you change containers from within the GUI, it will
 restart.
\end_layout

\begin_layout Standard
If you run 
\begin_inset Quotes eld
\end_inset

sincerity
\begin_inset Quotes erd
\end_inset

 without any command, it will default to starting the GUI.
 You can also start the GUI via the 
\begin_inset Quotes eld
\end_inset

gui:gui
\begin_inset Quotes erd
\end_inset

 command.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use container1 : gui
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If you are designing your own Sincerity plugin, it is strongly recommend
 that you include GUI support via the optional gui() entry point.
\end_layout

\begin_layout Subsection
Basic Concepts
\end_layout

\begin_layout Standard
Before detailing the core plugins and commands in the next chapter, it's
 important that you understand a few basic concepts:
\end_layout

\begin_layout Subsubsection
Container
\end_layout

\begin_layout Standard
A set of files implementing a self-contained JVM-based execution environment
 managed by Sincerity and by you.
 The container has a root path, under which it may have a directory structure
 of any depth.
 Libraries, binary executables, configuration files, temporary work files
 and logs are all by default stored within the container.
\end_layout

\begin_layout Standard
Why such an emphasis on self-containment? One goal is for the container
 to be deployable anywhere as a whole, simply by copying the directory elsewhere.
 Another goal is for the container to be a useful playground: you can install
 and try out various applications and libraries without affecting your operating
 system.
 You can undo you work simply by deleting the container's directory.
\end_layout

\begin_layout Standard
It is possible and sometimes useful to break this principle of self-containment
 by using symbolic links.
\end_layout

\begin_layout Standard
Below are some a few standard container subdirectories used by the core
 plugins.
 Other plugins and skeletons may add more subdirectories.
\end_layout

\begin_layout Paragraph
/.sincerity/
\end_layout

\begin_layout Standard
Reserved for Sincerity's internal use.
 It's most essential use is to mark a directory as a container root.
 If you are using a VCS, make sure to commit this hidden directory.
\end_layout

\begin_layout Paragraph
/cache/
\end_layout

\begin_layout Standard
Files put here should be considered deletable without any negative effects,
 and you likely do not want to commit them to a VCS.
\end_layout

\begin_layout Standard
Two subdirectories are most common: 
\begin_inset Quotes eld
\end_inset

/cache/sincerity/
\begin_inset Quotes erd
\end_inset

 is where Sincerity will store information about downloaded dependencies,
 and 
\begin_inset Quotes eld
\end_inset

/cache/javascript/
\begin_inset Quotes erd
\end_inset

 is where Scripturian will store its compiled JavaScript code.
\end_layout

\begin_layout Paragraph
/logs/
\end_layout

\begin_layout Standard
Files put here should be considered deletable without any negative effects,
 and you likely do not want to commit them to a VCS.
 This is used by the Logging plugin.
\end_layout

\begin_layout Paragraph
/configuration/
\end_layout

\begin_layout Standard
Container-wide configuration files for various libraries are found here.
 Note that generally Sincerity prefers 
\begin_inset Quotes eld
\end_inset

configuration by script,
\begin_inset Quotes erd
\end_inset

 so that most of these files will be in JavaScript code.
 However, some libraries may require XML, property sheets, or other idiosyncrati
c formats.
\end_layout

\begin_layout Standard
Various libraries will use their subdirectories here: for example, 
\begin_inset Quotes eld
\end_inset

/configuration/logging/
\begin_inset Quotes erd
\end_inset

 for the logging plugin.
\end_layout

\begin_layout Paragraph
/configuration/sincerity/
\end_layout

\begin_layout Standard
Here you can configure your container: repositories, dependencies, installed
 artifacts, and shortcuts.
 Note that you usually will not have to edit these files directory: many
 Sincerity core commands will manipulate these files for you.
\end_layout

\begin_layout Paragraph
/libraries/
\end_layout

\begin_layout Standard
Sincerity will install dependencies here, but you can also add your own
 files manually.
\end_layout

\begin_layout Standard
Note that the Sincerity installation also has a 
\begin_inset Quotes eld
\end_inset

/libraries/
\begin_inset Quotes erd
\end_inset

 subdirectory, which is considered in addition to the one found in your
 container.
\end_layout

\begin_layout Paragraph
/libraries/jars/
\end_layout

\begin_layout Standard
Sincerity will recursively add all Java archives (.jar files) here to the
 classpath.
 Those dependencies installed by Sincerity will follow the 
\begin_inset Quotes eld
\end_inset

/organization/name/version/name.jar
\begin_inset Quotes erd
\end_inset

 directory structure, for example: 
\begin_inset Quotes eld
\end_inset

org.slf4j/slf4j-api/1.6.6/slf4j-api.jar
\begin_inset Quotes erd
\end_inset

.
 It is 
\emph on
not 
\emph default
required that you follow the same structure for jars you install manually:
 
\emph on
all
\emph default
 jars found under this directory will be added.
\end_layout

\begin_layout Paragraph
/libraries/classes/
\end_layout

\begin_layout Standard
Sincerity adds this path to the classpath, expecting to find JVM class files
 (.class).
 The directory structure 
\emph on
must
\emph default
 be 
\begin_inset Quotes eld
\end_inset

/package/sub-package/.../classname.class
\begin_inset Quotes erd
\end_inset

.
 For example, the JVM class 
\begin_inset Quotes eld
\end_inset

org.myorg.Frame
\begin_inset Quotes erd
\end_inset

 would be in 
\begin_inset Quotes eld
\end_inset

/org/myorg/Frame.class
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Paragraph
/libraries/javascript/, /libraries/python/, etc.
\end_layout

\begin_layout Standard
These subdirectories are for libraries for specific programming languages
 to use directly.
 Note that these are slightly different from the 
\begin_inset Quotes eld
\end_inset

/libraries/scripturian/
\begin_inset Quotes erd
\end_inset

 subdirectory, which also contains programming language libraries, but is
 intended to use only from within Scripturian.
\end_layout

\begin_layout Paragraph
/libraries/scripturian/
\end_layout

\begin_layout Standard
Sincerity, as well as other products that use Scripturian, will look for
 executable documents here (and possibly in other places).
 Most libraries and frameworks will create their own subdirectory underneath.
 For example, Prudence libraries are under 
\begin_inset Quotes eld
\end_inset

/libraries/scripturian/prudence/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Paragraph
/libraries/scripturian/plugins/
\end_layout

\begin_layout Standard
This subdirectory is reserved for Sincerity plugins.
 Each document here represents a single plugin, and each plugin may implement
 any number of commands.
\end_layout

\begin_layout Paragraph
/libraries/scripturian/installers/
\end_layout

\begin_layout Standard
This subdirectory is reserved for Sincerity installers.
 Installers are run by the 
\begin_inset Quotes eld
\end_inset

dependencies:install
\begin_inset Quotes erd
\end_inset

 command, and are included in some dependencies as a way to execute arbitrary
 installation tasks.
 A common use case is for the install hook to manipulate the unpacked files
 in order to tailor them for the specific environment in which the container
 is running.
\end_layout

\begin_layout Paragraph
/libraries/web/
\end_layout

\begin_layout Standard
Files here are intended to be served over the web as static files, for example:
 images, HTML files, CSS, etc.
 Various web servers will look for files here (and possibly in other places).
 Various client-side web frameworks (such as jQuery, Ext JS) will thus install
 here, and be made available for various web servers you may have installed.
\end_layout

\begin_layout Paragraph
/programs/
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

delegate:start
\begin_inset Quotes erd
\end_inset

 command will look for Scripturian documents to run from here.
\end_layout

\begin_layout Paragraph
/executables/
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

delegate:execute
\begin_inset Quotes erd
\end_inset

 command will look for executables to run from here.
\end_layout

\begin_layout Paragraph
/reference/
\end_layout

\begin_layout Standard
Reference material, for use by humans or by software, will be available
 here.
\end_layout

\begin_layout Paragraph
/reference/documentation/
\end_layout

\begin_layout Standard
Here you'll find reference manuals and API documentation for installed dependenc
ies.
 Files installed by Sincerity will be placed in 
\begin_inset Quotes eld
\end_inset

/organization/name/version/
\begin_inset Quotes erd
\end_inset

 directory structure, for example: 
\begin_inset Quotes eld
\end_inset

org.slf4j/slf4j-api/1.6.6/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Paragraph
/reference/licenses/
\end_layout

\begin_layout Standard
Here you'll find licenses for installed dependencies.
 Files installed by Sincerity will be placed in 
\begin_inset Quotes eld
\end_inset

/organization/name/version/
\begin_inset Quotes erd
\end_inset

 directory structure, for example: 
\begin_inset Quotes eld
\end_inset

org.slf4j/slf4j-api/1.6.6/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Paragraph
/reference/sources/
\end_layout

\begin_layout Standard
Here you'll find source code for installed dependencies.
 Files installed by Sincerity will be placed in 
\begin_inset Quotes eld
\end_inset

/organization/name/version/
\begin_inset Quotes erd
\end_inset

 directory structure, for example: 
\begin_inset Quotes eld
\end_inset

org.slf4j/slf4j-api/1.6.6/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Dependency
\end_layout

\begin_layout Standard
A contained, versioned, installable set of files (called 
\begin_inset Quotes eld
\end_inset

artifacts
\begin_inset Quotes erd
\end_inset

), which can in turn have its own list of dependencies.
 Dependencies are deployable software bundles, representing things like
 libraries, frameworks, platforms and skeletons, including complete applications
 and services.
\end_layout

\begin_layout Standard
All dependencies in Sincerity are identified by a two-part name, composed
 of a 
\begin_inset Quotes eld
\end_inset

group
\begin_inset Quotes erd
\end_inset

 prefix plus a unique 
\begin_inset Quotes eld
\end_inset

name
\begin_inset Quotes erd
\end_inset

 within the group, plus a version specifier.
 Different dependencies might have their own versioning schemes, but Sincerity
 is good at guessing these for the purposes of comparing versions.
\end_layout

\begin_layout Standard
Note that a dependency can also have none of its own files, and only a list
 of its own dependencies, allowing for a convenient shortcut for installing
 several dependencies together.
 These are sometimes called 
\begin_inset Quotes eld
\end_inset

meta-dependencies.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
You can list all installed dependencies using the 
\begin_inset Quotes eld
\end_inset

dependencies:dependencies
\begin_inset Quotes erd
\end_inset

 command.
 However, note that dependencies are structured as a nested tree that may
 be better visualized using the GUI.
\end_layout

\begin_layout Subsubsection
Shortcut
\end_layout

\begin_layout Standard
Dependency names can be quite long and hard to remember.
 For example, 
\begin_inset Quotes eld
\end_inset

sincerity add com.threecrickets.sincerity.skeleton sincerity-jetty-servlet-jmx
\begin_inset Quotes erd
\end_inset

 included the full identifier (group and name) for a dependency.
 Instead, Sincerity allows for configurable shortcuts, for example, 
\begin_inset Quotes eld
\end_inset

sincerity add jetty.servlet.jmx
\begin_inset Quotes erd
\end_inset

 instead of the full identifier above.
\end_layout

\begin_layout Standard
Shortcuts are defined in a container's 
\begin_inset Quotes eld
\end_inset

/configuration/sincerity/shortcuts.conf
\begin_inset Quotes erd
\end_inset

 file.
 You can list them all using the 
\begin_inset Quotes eld
\end_inset

shortcuts:shortcuts
\begin_inset Quotes erd
\end_inset

 command.
\end_layout

\begin_layout Subsubsection
Artifact
\end_layout

\begin_layout Standard
There are files within a dependency.
 Sincerity supports a specific set of artifact types: JVM libraries (jars),
 language-specific libraries (Python eggs, Ruby gems, PHP packages, etc.),
 documentation bundles, source code bundles, software licenses, installers,
 dependency descriptors and more generic 
\begin_inset Quotes eld
\end_inset

packages
\begin_inset Quotes erd
\end_inset

 (see below).
\end_layout

\begin_layout Standard
You can list all installed artifacts using the 
\begin_inset Quotes eld
\end_inset

artifacts:artifacts
\begin_inset Quotes erd
\end_inset

 command.
\end_layout

\begin_layout Subsubsection
Package
\end_layout

\begin_layout Standard
This is a special kind of Sincerity-specific jar artifact that can contain
 other files, and can additionally have special install/uninstall hooks.
\end_layout

\begin_layout Standard
Sincerity contains tools to help you easily create your own packages, as
 well as documentation about the package specification, so that you can
 manually create your own.
\end_layout

\begin_layout Standard
Packages are automatically unpacked using the 
\begin_inset Quotes eld
\end_inset

dependencies:install
\begin_inset Quotes erd
\end_inset

 command, but you can also explicitly unpack them using 
\begin_inset Quotes eld
\end_inset

packages:unpack
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Repository
\end_layout

\begin_layout Standard
A store for dependencies and their artifacts.
 Repositories usually contain indexes of available dependencies and versions.
 Some repositories also have friendly human-facing web frontends which you
 can use to search for dependencies.
\end_layout

\begin_layout Standard
Sincerity supports several repository technologies, and can also help you
 deploy your own dependencies to them.
 
\end_layout

\begin_layout Section
Core Plugins
\end_layout

\begin_layout Standard
These are the plugins that come with the Sincerity installation and implement
 its most essential commands.
\end_layout

\begin_layout Standard
Since these commands are used so often, it's a good idea to avoid implementing
 these command names in your own custom plugins, so that there would never
 be ambiguity for the essentials.
 In other words, treat 
\begin_inset Quotes eld
\end_inset

add
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

install
\begin_inset Quotes erd
\end_inset

, etc.
 as reserved command names.
\end_layout

\begin_layout Standard
We've organized them here in the order by which you'd likely use them.
\end_layout

\begin_layout Standard
Optional arguments are marked by square brackets.
\end_layout

\begin_layout Subsection
Container
\end_layout

\begin_layout Standard
Manages Sincerity containers.
\end_layout

\begin_layout Subsubsection
container:create
\end_layout

\begin_layout Subsubsection
container:use
\end_layout

\begin_layout Subsubsection
container:clone
\end_layout

\begin_layout Subsubsection
container:clean
\end_layout

\begin_layout Subsection
Repositories
\end_layout

\begin_layout Standard
Manages repositories within the current container.
 Adds a 
\begin_inset Quotes eld
\end_inset

Repositories
\begin_inset Quotes erd
\end_inset

 tab to the Sincerity GUI.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

dependencies:install
\begin_inset Quotes erd
\end_inset

 command searches for dependencies in all attached repositories, 
\emph on
in order
\emph default
.
\end_layout

\begin_layout Standard
Instead of using these commands, you can also edit the container's 
\begin_inset Quotes eld
\end_inset

/configuration/sincerity/repositories.conf
\begin_inset Quotes erd
\end_inset

 file directly.
\end_layout

\begin_layout Subsubsection
repositories:repositories
\end_layout

\begin_layout Standard
List all repositories attached to the current container.
\end_layout

\begin_layout Subsubsection
repositories:attach
\end_layout

\begin_layout Standard
Attached (adds) a repository to the current container.
\end_layout

\begin_layout Subsubsection
repositories:detach
\end_layout

\begin_layout Standard
Detaches (removes) a repository from the current container.
\end_layout

\begin_layout Subsection
Dependencies
\end_layout

\begin_layout Standard
Manages dependencies for the current container.
 Adds 
\begin_inset Quotes eld
\end_inset

Dependencies
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Licenses
\begin_inset Quotes erd
\end_inset

 tabs to the Sincerity GUI.
\end_layout

\begin_layout Subsubsection
dependencies:dependencies
\end_layout

\begin_layout Standard
Lists all dependencies in the current container as a tree structure.
 Dependencies that are 
\emph on
not 
\emph default
installed will be listed in parentheses.
\end_layout

\begin_layout Subsubsection
dependencies:licenses
\end_layout

\begin_layout Standard
Lists all licenses per all dependencies in the current container.
 Note that dependencies may be available via more than one license.
\end_layout

\begin_layout Quote
Please be aware that you should not treat the output of this command as
 legally binding.
 Package managers do their best to provide you with correct and useful informati
on, but you should yourself investigate the licensing available per each
 library you use.
\end_layout

\begin_layout Paragraph
Switches
\end_layout

\begin_layout Itemize

\series bold
--verbose
\series default
: By default only the name of the license will be printed.
 With this switch, the URL will be printed, too, if available.
\end_layout

\begin_layout Subsubsection
dependencies:install
\end_layout

\begin_layout Standard
This powerful command downloads and installs the current container's dependencie
s and their sub-dependencies from the online repositories to which it is
 attached.
 It should thus be used after 
\begin_inset Quotes eld
\end_inset

dependencies:add
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

repositories:attach
\begin_inset Quotes erd
\end_inset

 have been used.
 This command also handles upgrades and resolves version conflicts.
\end_layout

\begin_layout Standard
Installation happens in several phases:
\end_layout

\begin_layout Enumerate

\series bold
Checking
\series default
: First, it searches for your dependencies in all attached repositories
 
\emph on
in order
\emph default
.
 It uses the 
\begin_inset Quotes eld
\end_inset

/configuration/sincerity/dependencies.conf
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/configuration/sincerity/repositories.conf
\begin_inset Quotes erd
\end_inset

 files as a starting point.
 Though you can edit these directly (or copy them from elsewhere), you may
 prefer to use the 
\begin_inset Quotes eld
\end_inset

dependencies:add
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

repositories:attach
\begin_inset Quotes erd
\end_inset

 commands to manipulate them instead.
\end_layout

\begin_layout Enumerate

\series bold
Meta-data
\series default
: When found, the meta-data (in Maven this is a .pom file) for the package
 is downloaded and stored in a local cache (under 
\begin_inset Quotes eld
\end_inset

/cache/sincerity/packages/
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Enumerate

\series bold
Recursion
\series default
: If your dependency has sub-dependencies, they are added.
 Phases 1 to 3 are repeated for each.
\end_layout

\begin_layout Enumerate

\series bold
Resolution
\series default
: Now that we have a complete dependency tree, it will be 
\begin_inset Quotes eld
\end_inset

resolved.
\begin_inset Quotes erd
\end_inset

 This means that duplicate dependencies will be skipped, highest possible
 versions for dependencies will be selected.
 Note that upgrades are handled by this phase: if a newer version of a certain
 dependency is found, it will be selected instead of the previously installed
 one.
 Rarely, this phase may fail with an error due to version conflicts that
 cannot be resolved.
\end_layout

\begin_layout Enumerate

\series bold
Download/Delete
\series default
: The dependencies selected for installation in the resolution phase will
 be downloaded, and those that were previously installed and are no longer
 needed (for an upgrade) will be deleted.
 You can use the 
\begin_inset Quotes eld
\end_inset

dependencies:dependencies
\begin_inset Quotes erd
\end_inset

 command to see the whole dependency tree, including dependencies that were
 selected to not be installed by the resolution phase.
 A more detailed report will be made available in 
\begin_inset Quotes eld
\end_inset

/cache/sincerity/resolution/threecrickets-sincerity-container-default.xml
\begin_inset Quotes erd
\end_inset

.
 Note that this XML report uses XSL and CSS to make it nicely readable in
 a web browser.
\end_layout

\begin_layout Enumerate

\series bold
Unpack
\series default
: Installed packages will be unpacked.
 This is identical to the 
\begin_inset Quotes eld
\end_inset

packages:unpack
\begin_inset Quotes erd
\end_inset

 command, and may cause new artifacts to appear in your container, as well
 as arbitrary code to be executed via installer hooks in a package.
\end_layout

\begin_layout Enumerate

\series bold
Prune
\series default
: Unused artifacts will be deleted, 
\emph on
unless you have changed them
\emph default
.
 This is identical to the 
\begin_inset Quotes eld
\end_inset

artifacts:prune
\begin_inset Quotes erd
\end_inset

 command.
\end_layout

\begin_layout Standard
Under the hood, Sincerity relies on 
\begin_inset CommandInset href
LatexCommand href
name "Ivy"
target "http://ant.apache.org/ivy/"

\end_inset

 to handle phases 1 to 5, and it may be useful to refer to documentation
 there if you require specialized configuration and handling.
\end_layout

\begin_layout Standard
Note that remote repositories introduce consider delay for phases 1, 2 and
 5.
 Furthermore, the more repositories you attach, the longer phase 1 will
 take, as each repository is checked.
 For these reasons, as well as saving you from network/server failure by
 3rd party providers, it is strongly recommend that you run a local proxy
 for the repositories you use.
 You can install one easily with Sincerity using the Nexus skeleton.
\end_layout

\begin_layout Paragraph
Switches
\end_layout

\begin_layout Itemize

\series bold
--overwrite
\series default
: This affects phase 6.
 See 
\begin_inset Quotes eld
\end_inset

packages:unpack
\begin_inset Quotes erd
\end_inset

 for more information.
\end_layout

\begin_layout Subsubsection
dependencies:uninstall
\end_layout

\begin_layout Subsubsection
dependencies:reset
\end_layout

\begin_layout Subsubsection
dependencies:add
\end_layout

\begin_layout Subsubsection
dependencies:remove
\end_layout

\begin_layout Subsubsection
dependencies:revise
\end_layout

\begin_layout Subsection
Packages
\end_layout

\begin_layout Standard
Manages packages in the current container.
\end_layout

\begin_layout Subsubsection
packages:unpack
\end_layout

\begin_layout Standard
Unpacks all Sincerity packages in 
\begin_inset Quotes eld
\end_inset

/libraries/jars/
\begin_inset Quotes erd
\end_inset

.
 If the package has an installer hook, it will be executed after the artifacts
 are unpacked.
\end_layout

\begin_layout Standard
You usually would not have to run this command by itself, because it is
 part of 
\begin_inset Quotes eld
\end_inset

dependencies:install
\begin_inset Quotes erd
\end_inset

.
 However, it may be useful in case you are manipulating the contents of
 
\begin_inset Quotes eld
\end_inset

/libraries/jars/
\begin_inset Quotes erd
\end_inset

 manually.
\end_layout

\begin_layout Standard
It is also useful in case you've made various changes to unpacked artifacts
 and want to restore them to their initial unpacked state.
 A good way to do this is to delete all the files that you want to restore
 and then run 
\begin_inset Quotes eld
\end_inset

sincerity unpack
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Paragraph
Arguments
\end_layout

\begin_layout Enumerate

\series bold
[Filter]
\series default
: Currently unused.
\end_layout

\begin_layout Paragraph
Switches
\end_layout

\begin_layout Itemize

\series bold
--overwrite
\series default
: By default the command will not overwrite existing files.
 This behavior ensures that you do not lose your custom work.
 However, you can override this behavior using this switch.
 
\emph on
Be careful:
\emph default
 this will overwrite files unpacked by 
\emph on
all 
\emph default
packages.
 If you only want to overwrite a select few files, it is best to delete
 them and then run 
\begin_inset Quotes eld
\end_inset

unpack
\begin_inset Quotes erd
\end_inset

 
\emph on
without
\emph default
 this switch.
\end_layout

\begin_layout Subsection
Artifacts
\end_layout

\begin_layout Standard
Manages artifacts in the current container.
 Adds an 
\begin_inset Quotes eld
\end_inset

Artifacts
\begin_inset Quotes erd
\end_inset

 tab to the Sincerity GUI.
\end_layout

\begin_layout Subsubsection
artifacts:artifacts
\end_layout

\begin_layout Standard
Lists artifacts available for each dependency.
 If the dependency is 
\emph on
not 
\emph default
installed, it will be listed in parentheses.
\end_layout

\begin_layout Paragraph
Switches
\end_layout

\begin_layout Itemize

\series bold
--packages
\series default
: Shows artifacts within packages (by default these are 
\emph on
not
\emph default
 shown).
\end_layout

\begin_layout Itemize

\series bold
--verbose
\series default
: In non-verbose mode (the default) only the type of artifact is shown.
 In verbose mode you'll see the complete relative path to the artifact as
 well as its size in bytes.
\end_layout

\begin_layout Subsubsection
artifacts:prune
\end_layout

\begin_layout Standard
Deletes artifacts that were previously installed by Sincerity but for which
 their dependencies no longer exist.
\end_layout

\begin_layout Standard

\emph on
Note that artifacts that were changed since installation will not be deleted.
 
\emph default
This behavior ensures that you do not lose your custom work.
\end_layout

\begin_layout Standard
You usually would not have to run this command by itself, because it is
 part of 
\begin_inset Quotes eld
\end_inset

dependencies:install
\begin_inset Quotes erd
\end_inset

.
 However, it may be useful in case you are manipulating the contents of
 
\begin_inset Quotes eld
\end_inset

/libraries/jars/
\begin_inset Quotes erd
\end_inset

 manually.
\end_layout

\begin_layout Subsection
Delegate
\end_layout

\begin_layout Standard
Manages entry points into the current container, and is the primary means
 to run applications in it.
 Adds a 
\begin_inset Quotes eld
\end_inset

Programs
\begin_inset Quotes erd
\end_inset

 tab to the Sincerity GUI.
\end_layout

\begin_layout Subsubsection
delegate:main
\end_layout

\begin_layout Standard
Calls the main() method within a JVM class.
\end_layout

\begin_layout Subsubsection
delegate:start
\end_layout

\begin_layout Standard
Executes a Scripturian document.
\end_layout

\begin_layout Paragraph
Arguments
\end_layout

\begin_layout Enumerate
Document name: The argument is a document name, either relative to the current
 container root or to the 
\begin_inset Quotes eld
\end_inset

/programs/
\begin_inset Quotes erd
\end_inset

 subdirectory.
 As usual with Scripturian, filename extensions should not be used.
 If the name points to a directory, then the default file in that directory
 will be executed.
 For example, 
\begin_inset Quotes eld
\end_inset

sincerity start component
\begin_inset Quotes erd
\end_inset

 would execute 
\begin_inset Quotes eld
\end_inset

/component/default.js
\begin_inset Quotes erd
\end_inset

 from within the current container.
\end_layout

\begin_layout Subsubsection
delegate:execute
\end_layout

\begin_layout Standard

\emph on
This command starts a new process
\emph default
, which would be a child process of Sincerity.
\end_layout

\begin_layout Subsubsection
delegate:programs
\end_layout

\begin_layout Standard
Lists all available programs in the current container (documents in the
 
\begin_inset Quotes eld
\end_inset

/programs/
\begin_inset Quotes erd
\end_inset

 subdirectory).
\end_layout

\begin_layout Subsubsection
delegate:languages
\end_layout

\begin_layout Standard
Lists all languages supported by Scripturian in the current container.
\end_layout

\begin_layout Subsection
Templates
\end_layout

\begin_layout Standard
Manages templates in the Sincerity installation.
 Adds a 
\begin_inset Quotes eld
\end_inset

Templates
\begin_inset Quotes erd
\end_inset

 tab to the Sincerity GUI.
\end_layout

\begin_layout Standard
Templates are used by the 
\begin_inset Quotes eld
\end_inset

container:create
\begin_inset Quotes erd
\end_inset

 command to initialize new containers.
\end_layout

\begin_layout Subsubsection
templates:templates
\end_layout

\begin_layout Standard
Lists all templates available in the Sincerity installation.
\end_layout

\begin_layout Subsubsection
templates:templatize
\end_layout

\begin_layout Standard
Turns the current container into a Sincerity template.
 This works by simply recursively copying the current container into your
 Sincerity installation's 
\begin_inset Quotes eld
\end_inset

/templates/
\begin_inset Quotes erd
\end_inset

 directory.
 Note that you must have write permissions there in order for this to work.
\end_layout

\begin_layout Subsection
Shortcuts
\end_layout

\begin_layout Standard
Manages shortcuts for the current container.
 Adds a 
\begin_inset Quotes eld
\end_inset

Shortcuts
\begin_inset Quotes erd
\end_inset

 tab to the Sincerity GUI.
\end_layout

\begin_layout Subsection
Help
\end_layout

\begin_layout Standard
Provides general information about your Sincerity installation.
 Adds a 
\begin_inset Quotes eld
\end_inset

Commands
\begin_inset Quotes erd
\end_inset

 tab to the Sincerity GUI.
\end_layout

\begin_layout Subsubsection
help:version
\end_layout

\begin_layout Standard
Lists Sincerity version information.
 This includes the numerical version and the build timestamp.
 An example of output:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

built=Jun 18 2013, 15:28:46, TZ+0800
\end_layout

\begin_layout Plain Layout

version=1.0-dev5 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
help:help
\end_layout

\begin_layout Standard
Lists all available Sincerity commands (in full form) from all available
 Sincerity plugins.
 This includes both plugins installed in the current container and those
 available in the Sincerity installation.
\end_layout

\begin_layout Subsubsection
help:verbosity
\end_layout

\begin_layout Standard
If no argument is provided, prints out the current Sincerity output verbosity.
 If an argument is provided (integer >=0) then changes the current verbosity.
 Note that the default verbosity is 1, and you can change the verbosity
 several times within a chained Sincerity command.
\end_layout

\begin_layout Standard
Verbosity is interpreted individually by individual commands, though 0 usually
 means 
\begin_inset Quotes eld
\end_inset

silent,
\begin_inset Quotes erd
\end_inset

 1 means 
\begin_inset Quotes eld
\end_inset

only important messages
\begin_inset Quotes erd
\end_inset

 and 2 means 
\begin_inset Quotes eld
\end_inset

quite chatty.
\begin_inset Quotes erd
\end_inset

 Higher values usually include more minute debugging information.
\end_layout

\begin_layout Standard
Note that verbosity is 
\emph on
only 
\emph default
used to control messages to standard output and standard error.
 Configuring logging should be done separately (see the Logging plugin).
\end_layout

\begin_layout Subsection
GUI
\end_layout

\begin_layout Standard
Manages the Sincerity GUI.
\end_layout

\begin_layout Subsubsection
gui:gui
\end_layout

\begin_layout Standard
Starts the Sincerity GUI.
 The GUI will go through all available plugins and try to call the optional
 gui() entry point if they have them, allowing plugins to enhance the GUI
 as is appropriate.
\end_layout

\begin_layout Standard
Note that this command blocks until the GUI is shut down.
\end_layout

\begin_layout Paragraph
Switches
\end_layout

\begin_layout Itemize
--
\series bold
ui=
\series default
: Let's you change the Swing look-and-feel.
 Look-and-feels supported on most JVMs are: 
\begin_inset Quotes eld
\end_inset

metal
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

nimbus
\begin_inset Quotes erd
\end_inset

.
 Note that if no look-and-feel is specified, or the specified look-and-feel
 is not found, then Sincerity will attempt to default to the native look-and-fee
l, 
\emph on
unless the native platform is GTK
\emph default
.
 We found the GTK look-and-feel to be so riddled with bugs that we decided
 to spare you from it.
\end_layout

\begin_layout Subsection
Java
\end_layout

\begin_layout Standard
Support for the Java programming language.
\end_layout

\begin_layout Subsubsection
java:compile
\end_layout

\begin_layout Standard
Compiles Java source files (.java) into JVM class files (.class) using the
 current container's classpath.
\end_layout

\begin_layout Standard
Note that you must have a full JDK to use this command: a JRE usually does
 not come with a Java compiler.
\end_layout

\begin_layout Paragraph
Arguments
\end_layout

\begin_layout Enumerate

\series bold
[Source directory]
\series default
: Recursively compiles all .java files in this directory (relative to the
 container root).
 Defaults to 
\begin_inset Quotes eld
\end_inset

/libraries/java/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Enumerate

\series bold
[Classes directory]
\series default
: Output .class files here.
 Defaults to 
\begin_inset Quotes eld
\end_inset

/libraries/classes/
\begin_inset Quotes erd
\end_inset

.
 Note that Sincerity will always include this directory in its classpath,
 so it may be a good idea to keep this default.
\end_layout

\begin_layout Section
Language Plugins
\end_layout

\begin_layout Standard
These plugins add a language engine to your container.
 In some cases, this also means support for standard tools that come with
 the language distribution, such as a CLI, a REPL, and tools for compilation
 and packaging.
\end_layout

\begin_layout Standard
Most of these language engines support the Scripturian standard, meaning
 that with a language plugin installed you can:
\end_layout

\begin_layout Itemize
Write programs in this language.
 For example, with Python installed, you can write a 
\begin_inset Quotes eld
\end_inset

/programs/fish.py
\begin_inset Quotes erd
\end_inset

 program and start it via 
\begin_inset Quotes eld
\end_inset

sincerity start fish
\begin_inset Quotes erd
\end_inset

.
 Note that the service plugin can also be used to run programs as daemons
 or services.
\end_layout

\begin_layout Itemize
Write Sincerity plugins in this language.
 For example, with Ruby installed, you can write a 
\begin_inset Quotes eld
\end_inset

/libraries/scripturian/plugins/fish.rb
\begin_inset Quotes erd
\end_inset

 plugin.
\end_layout

\begin_layout Subsection
JavaScript Plugin
\end_layout

\begin_layout Standard
Though JavaScript was originally designed to be run in web browsers, it
 is a powerful general-purpose C-syntax language with Scheme-like closures
 that supports many programming paradigms.
 Sincerity implements JavaScript via 
\begin_inset CommandInset href
LatexCommand href
name "Rhino"
target "https://developer.mozilla.org/en/docs/Rhino"

\end_inset

, but we are committed in the future to support Nashorn (to be made available
 in JVM 8).
\end_layout

\begin_layout Standard

\emph on
Important: You do not need this plugin to install JavaScript support for
 Sincerity.

\emph default
 It does, however, provide you with a new command to get easy access to
 a JavaScript shell.
\end_layout

\begin_layout Standard
To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add javascript : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity javascript
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this JavaScript shell does not use Scripturian, nor does it have
 access to any Sincerity APIs.
 To run JavaScript files in Sincerity's Scripturian environment use the
 
\begin_inset Quotes eld
\end_inset

delegate:start
\begin_inset Quotes erd
\end_inset

 command.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The shell can run script files and also evaluate inline scripts as arguments.
 Use 
\begin_inset Quotes eld
\end_inset

sincerity javascript -h
\begin_inset Quotes erd
\end_inset

 to see the command's possible arguments.
 An example of an inline script:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add javascript : install : javascript -e "print('Hello, world')"
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Python Plugin
\end_layout

\begin_layout Standard
Python is a general-purpose multi-paradigm dynamic language with an exceptionall
y clean syntax and a rich ecosystem.
 Sincerity implements Python via 
\begin_inset CommandInset href
LatexCommand href
name "Jython"
target "http://www.jython.org/"

\end_inset

, and also has limited support for 
\begin_inset CommandInset href
LatexCommand href
name "Jepp"
target "http://jepp.sourceforge.net/"

\end_inset

.
\end_layout

\begin_layout Standard
To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add python : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity python
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this Python shell does not use Scripturian, nor does it have access
 to any Sincerity APIs.
 To run Python files in Sincerity's Scripturian environment use the 
\begin_inset Quotes eld
\end_inset

delegate:start
\begin_inset Quotes erd
\end_inset

 command.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The shell can run script files and also evaluate inline scripts as arguments.
 Use 
\begin_inset Quotes eld
\end_inset

sincerity python -h
\begin_inset Quotes erd
\end_inset

 to see the command's possible arguments.
 An example of an inline script:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add python : install : python -c "print 'Hello, world'"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Python has a very extensive ecosystem hosted on 
\begin_inset CommandInset href
LatexCommand href
name "PyPI"
target "https://pypi.python.org/pypi"

\end_inset

 (a.k.a.
 
\begin_inset Quotes eld
\end_inset

The Cheese Factory
\begin_inset Quotes erd
\end_inset

) in 
\begin_inset Quotes eld
\end_inset

egg
\begin_inset Quotes erd
\end_inset

 format.
 You can install libraries, frameworks and applications into your Sincerity
 container using a special version of 
\begin_inset Quotes eld
\end_inset

easy_install
\begin_inset Quotes erd
\end_inset

 included in this plugin as a Sincerity command.
 For example, let's install 
\begin_inset CommandInset href
LatexCommand href
name "Beej's Flickr API"
target "http://stuvel.eu/flickrapi"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity easy_install flickrapi
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eggs will be installed into your container under the 
\begin_inset Quotes eld
\end_inset

/libraries/python/Lib/site-packages/
\begin_inset Quotes erd
\end_inset

 subdirectory.
\end_layout

\begin_layout Standard
Note that not all software written for CPython runs well on the Jython engine.
 See the software's documentation for more details.
\end_layout

\begin_layout Standard
The Sincerity Python plugin also include a 
\begin_inset Quotes eld
\end_inset

python
\begin_inset Quotes erd
\end_inset

 command (under 
\begin_inset Quotes eld
\end_inset

/executables/python
\begin_inset Quotes erd
\end_inset

) to allow for proper integration with Python software that starts Python
 subprocesses.
 You can run this command directly, and even use it with a shebang for executabl
e files.
 For example, this file is executable:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/path/to/mycontainer/executables/python
\end_layout

\begin_layout Plain Layout

print 'hello world'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can also place such files in your 
\begin_inset Quotes eld
\end_inset

/executables/
\begin_inset Quotes erd
\end_inset

 subdirectory and run them using Sincerity's 
\begin_inset Quotes eld
\end_inset

delegate:execute
\begin_inset Quotes erd
\end_inset

 command.
\end_layout

\begin_layout Subsection
Ruby Plugin
\end_layout

\begin_layout Standard
Ruby is a general-purpose multi-paradigm dynamic language with a exceptionally
 full set of features and a rich ecosystem.
\end_layout

\begin_layout Standard
Sincerity implements Ruby via 
\begin_inset CommandInset href
LatexCommand href
name "JRuby"
target "http://jruby.org/"

\end_inset

, an exceptionally robust implementation.
\end_layout

\begin_layout Standard
To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add ruby : install
\end_layout

\end_inset

To use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity ruby
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this Ruby shell does not use Scripturian, nor does it have access
 to any Sincerity APIs.
 To run Ruby files in Sincerity's Scripturian environment use the 
\begin_inset Quotes eld
\end_inset

delegate:start
\begin_inset Quotes erd
\end_inset

 command.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The shell can run script files and also evaluate inline scripts as arguments.
 Use 
\begin_inset Quotes eld
\end_inset

sincerity ruby -h
\begin_inset Quotes erd
\end_inset

 to see the command's possible arguments.
 An example of an inline script:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add ruby : install : ruby -e "puts 'Hello, world'"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ruby has a very extensive ecosystem hosted on 
\begin_inset CommandInset href
LatexCommand href
name "RubyGems"
target "http://rubygems.org/"

\end_inset

 in 
\begin_inset Quotes eld
\end_inset

gem
\begin_inset Quotes erd
\end_inset

 format.
 You can install libraries, frameworks and applications into your Sincerity
 container using a version of 
\begin_inset Quotes eld
\end_inset

gem
\begin_inset Quotes erd
\end_inset

 included in this plugin as a Sincerity command.
 For example, let's install 
\begin_inset CommandInset href
LatexCommand href
name "Flickraw"
target "http://hanklords.github.io/flickraw/"

\end_inset

, an API for accessing Flickr:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity gem install flickraw
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Gems will be installed into your container under the 
\begin_inset Quotes eld
\end_inset

/libraries/ruby/lib/ruby/gems/shared/
\begin_inset Quotes erd
\end_inset

 subdirectory.
\end_layout

\begin_layout Standard
Note that not all software written for Ruby runs well on the JRuby engine
 (though in some cases it may actually run 
\emph on
better
\emph default
 in JRuby).
 See the software's documentation for more details.
\end_layout

\begin_layout Standard
Other standard Ruby commands supported by the plugin are: 
\begin_inset Quotes eld
\end_inset

ast
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

irb
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

rake
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

rdoc
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

ri
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

testrb
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The Sincerity Ruby plugin makes sure that the execution environment will
 work with the JRuby ecosystem.
 Specifically, JRuby executable files start with the 
\begin_inset Quotes eld
\end_inset

env
\begin_inset Quotes erd
\end_inset

 shebang, for example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/usr/bin/env jruby
\end_layout

\begin_layout Plain Layout

puts 'Hello, world'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can place such files in your 
\begin_inset Quotes eld
\end_inset

/executables/
\begin_inset Quotes erd
\end_inset

 subdirectory and run them using Sincerity's 
\begin_inset Quotes eld
\end_inset

delegate:execute
\begin_inset Quotes erd
\end_inset

 command.
\end_layout

\begin_layout Subsection
PHP Plugin
\end_layout

\begin_layout Standard
Though PHP was designed for generating web pages, it is also useful as a
 general-purpose templating language.
 Sincerity implements PHP via 
\begin_inset CommandInset href
LatexCommand href
name "Quercus"
target "http://quercus.caucho.com/"

\end_inset

.
 Note that the free version of Quercus is included, but you may easily swap
 it for a purchased professional release if you have it.
 
\end_layout

\begin_layout Standard
To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add php : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity php
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this PHP shell does not use Scripturian, nor does it have access
 to any Sincerity APIs.
 To run PHP files in Sincerity's Scripturian environment use the 
\begin_inset Quotes eld
\end_inset

delegate:start
\begin_inset Quotes erd
\end_inset

 command.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The shell can run script files provided as arguments.
 Use 
\begin_inset Quotes eld
\end_inset

sincerity php -h
\begin_inset Quotes erd
\end_inset

 for more information.
 For example, let's create a file named 
\begin_inset Quotes eld
\end_inset

test.php
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<?php
\end_layout

\begin_layout Plain Layout

print "Hello, World!
\backslash
n";
\end_layout

\begin_layout Plain Layout

?>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And then run it like so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add php : install : php test.php
\end_layout

\end_inset


\end_layout

\begin_layout Standard
PHP has a very extensive ecosystem hosted on 
\begin_inset CommandInset href
LatexCommand href
name "PEAR"
target "http://pear.php.net/"

\end_inset

, often in PHP archive (.phar) format.
 Though Sincerity does not yet support PEAR directly, you can install PEAR
 libraries using standard PHP and then copy them over to your Sincerity
 container.
\end_layout

\begin_layout Subsection
Groovy Plugin
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Groovy"
target "http://groovy.codehaus.org/"

\end_inset

 is a dynamic language with a syntax familiar to Java programmers, but with
 features inspired by Python, Ruby and Smalltalk.
 It provides exceptionally good integration with libraries written in Java,
 such that any JVM library is immediately also a Groovy library.
\end_layout

\begin_layout Standard
To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add groovy : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity groovy
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The shell can run script files and also evaluate inline scripts as arguments.
 Use 
\begin_inset Quotes eld
\end_inset

sincerity groovy
\begin_inset Quotes erd
\end_inset

 to see the command's possible arguments.
 An example of an inline script:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add groovy : install : groovy -e "println 'Hello, world'"
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Clojure Plugin
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Clojure"
target "http://clojure.org/"

\end_inset

 is a modern Lisp designed for concurrency and performance.
 It is a superbly expressive language that supports robust functional programmin
g as well as other paradigms.
\end_layout

\begin_layout Standard
To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add clojure : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity groovy
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The shell (actually a REPL) can run script files and also evaluate inline
 scripts as arguments.
 Use 
\begin_inset Quotes eld
\end_inset

sincerity clojure -h
\begin_inset Quotes erd
\end_inset

 to see the command's possible arguments.
 An example of an inline script:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add clojure : install : clojure -e '(println "Hello, World")'
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Clojure has a very extensive ecosystem hosted on 
\begin_inset CommandInset href
LatexCommand href
name "Clojars"
target "https://clojars.org/"

\end_inset

.
 It is a standard Maven-type repository that is naturally supported by Sincerity
, and attached by default if you use the 
\begin_inset Quotes eld
\end_inset

add clojure
\begin_inset Quotes erd
\end_inset

 shortcut.
 For example, let's install the 
\begin_inset CommandInset href
LatexCommand href
name "flickr-clj"
target "https://github.com/stanistan/flickr-clj"

\end_inset

, an API to access Flickr:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add clojure : add org.clojars.stanistan flickr-clj : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A shortcut is also available for attaching Clojars explicitly:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity attach clojars : attach maven-central
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that many Clojars libraries also rely on Maven Central, so it's a good
 idea to attach it as well.
 Both are attached when you use 
\begin_inset Quotes eld
\end_inset

add clojure
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Section
Feature Plugins
\end_layout

\begin_layout Subsection
Sincerity Standalone Plugin
\end_layout

\begin_layout Standard
See also the redistribution plugin for a different approach to distribution.
\end_layout

\begin_layout Subsection
Logging Plugin
\end_layout

\begin_layout Standard
This plugin makes it exceptionally easy to unify and configure your logging
 across a diverse set of technologies and dependencies.
 In most cases, simply installing this plugin into your container should
 handle all logging with sensible defaults.
 Should you need to customize and configure logging, you'll find Sincerity's
 scheme especially flexible and powerful.
\end_layout

\begin_layout Standard
Though the JVM includes a standard logging API, in the 
\begin_inset Quotes eld
\end_inset

java.util.logging
\begin_inset Quotes erd
\end_inset

 (
\begin_inset Quotes eld
\end_inset

JULI
\begin_inset Quotes erd
\end_inset

) package, the greater JVM ecology has adopted a few incompatible standards.
 In particular, 
\begin_inset CommandInset href
LatexCommand href
name "Apache log4j"
target "http://logging.apache.org/log4j/"

\end_inset

, which was the inspiration for JULI, enjoys broad support and a more robust
 implementation.
 We've thus preferred to use log4j for our actual implementation, and rely
 on the excellent 
\begin_inset CommandInset href
LatexCommand href
name "SLF4J"
target "http://www.slf4j.org/"

\end_inset

 library for bridging JULI to it.
 SLF4J has become popular enough that several libraries support it directly,
 so that we can even avoid the minimal overhead introduced by bridging.
\end_layout

\begin_layout Standard
To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add logging : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To initialize logging, you can execute the 
\begin_inset Quotes eld
\end_inset

logging
\begin_inset Quotes erd
\end_inset

 command from within your programs.
 An example in JavaScript:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// Will do nothing if the logging plugin is not installed:
\end_layout

\begin_layout Plain Layout

try { sincerity.run('logging:logging') } catch(x) {}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can also test logging simply using the 
\begin_inset Quotes eld
\end_inset

log
\begin_inset Quotes erd
\end_inset

 command, which sends an 
\begin_inset Quotes eld
\end_inset

info
\begin_inset Quotes erd
\end_inset

 level message to the 
\begin_inset Quotes eld
\end_inset

sincerity
\begin_inset Quotes erd
\end_inset

 logger:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add logging : install : log "This is a test!"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Logs will appear under the 
\begin_inset Quotes eld
\end_inset

/logs/
\begin_inset Quotes erd
\end_inset

 directory.
 By default, all loggers are appended to 
\begin_inset Quotes eld
\end_inset

/logs/common.log
\begin_inset Quotes erd
\end_inset

, which is a rolling log file with a size of 5MB per file, and a maximum
 of 10 files.
\end_layout

\begin_layout Quote

\series bold
Note for Restlet users:
\series default
 If you're using the Restlet skeleton, it's recommended to install the Restlet
 skeleton logging add-on, which depends on this plugin and additionally
 adds a Restlet extension library that provides high-performance direct
 access to SLF4J.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Officially,
\begin_inset Quotes erd
\end_inset

 log4j configuration is based either on JVM properties files or XML.
 Both are hardcoded, inflexible and difficult to scale.
 Sincerity's logging plugin instead uses a powerful JavaScript-based scheme,
 which allows you to dynamically configure your loggers according to your
 operating environment.
\end_layout

\begin_layout Standard
Configure your loggers under 
\begin_inset Quotes eld
\end_inset

/configuration/logging/loggers/
\begin_inset Quotes erd
\end_inset

 and your appenders under 
\begin_inset Quotes eld
\end_inset

/configuration/logging/appenders/
\begin_inset Quotes erd
\end_inset

.
 Any JavaScript file you add to these directories will be executed upon
 logging initialization.
 Take a look at the defaults to get a sense of how this works.
\end_layout

\begin_layout Standard
For example, if you want to add console logging to root, add the following
 line to 
\begin_inset Quotes eld
\end_inset

/configuration/logging/loggers/root.js
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

logger.addAppender(appenders.console)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that you can also use 
\begin_inset Quotes eld
\end_inset

official
\begin_inset Quotes erd
\end_inset

 log4j configuration if you are more comfortable with it.
 If the file 
\begin_inset Quotes eld
\end_inset

/configuration/logging.conf
\begin_inset Quotes erd
\end_inset

 is present, it will be used.
 This file can either be a properties file, or an XML file (in which case
 it must begin with the 
\begin_inset Quotes eld
\end_inset

<?xml
\begin_inset Quotes erd
\end_inset

 header).
 The plugin comes with an example 
\begin_inset Quotes eld
\end_inset

logging.conf
\begin_inset Quotes erd
\end_inset

 named 
\begin_inset Quotes eld
\end_inset

logging.alt.conf
\begin_inset Quotes erd
\end_inset

, which you can rename to 
\begin_inset Quotes eld
\end_inset

logging.conf
\begin_inset Quotes erd
\end_inset

 if you wish to use it.
\end_layout

\begin_layout Standard
The logging plugin also comes with a simple 
\begin_inset Quotes eld
\end_inset

log
\begin_inset Quotes erd
\end_inset

 command to test your logging configuration.
 Example usage:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity log "Hello, log!"
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Extras
\end_layout

\begin_layout Standard
In distributed environments, such as grids and clouds, you may prefer to
 centralize your logging.
 To aid this common use case, Sincerity comes with two logging server solutions.
\end_layout

\begin_layout Paragraph
log4j Server
\end_layout

\begin_layout Standard
You can create a simple log4j TCP-based socket server, which comes with
 the logging plugin:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create logserver : add logging : install : start log4j-server
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that we're creating the log4j server in a separate container, and starting
 it as a separate process.
\end_layout

\begin_layout Standard
On this log4j server, you want to configure all the appenders as on the
 client processes.
 Then, on all your client processes, you want to disable all the appenders
 except the socket appender (
\begin_inset Quotes eld
\end_inset

/configuration/logging/appenders/socket.js
\begin_inset Quotes erd
\end_inset

).
 Uncomment all the code there to enable it and make it the default root
 appender.
\end_layout

\begin_layout Standard
The result is that all logging messages will be sent from the clients to
 the server, where they will logged normally.
\end_layout

\begin_layout Standard
Additionally, it's recommend to run the log4j server with Sincerity's service
 plugin:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create logserver : add logging : add service : install : service
 log4j-server start
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
MongoDB Appender
\end_layout

\begin_layout Standard
You can install a 
\begin_inset CommandInset href
LatexCommand href
name "MongoDB"
target "http://www.mongodb.org/"

\end_inset

-backed appender, based on 
\begin_inset CommandInset href
LatexCommand href
name "Log4mongo"
target "http://log4mongo.org/"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add logging.mongodb : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To configure the MongoDB connection, edit 
\begin_inset Quotes eld
\end_inset

/configuration/logging/appenders/common-mongo-db.js
\begin_inset Quotes erd
\end_inset

.
 By default, it connects to localhost at the default port (27017) without
 security, and logs to database 
\begin_inset Quotes eld
\end_inset

logs
\begin_inset Quotes erd
\end_inset

, collection 
\begin_inset Quotes eld
\end_inset

common
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
It is strongly recommended that you use a 
\begin_inset CommandInset href
LatexCommand href
name "capped collection"
target "http://www.mongodb.org/display/DOCS/Capped+Collections"

\end_inset

 for your log.
 This guarantees both excellent write performance as well as automatic rolling.
 You can create it from the mongo shell like so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

db.createCollection('log', {capped: true, size: 100000})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Or, convert an existing collection to capped:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

db.runCommand({'convertToCapped': 'log', size: 100000})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This plugin also provides you with a very useful tool to 
\begin_inset Quotes eld
\end_inset

tail
\begin_inset Quotes erd
\end_inset

 your central log (works only with capped collections):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity logtail
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Press CTRL+C to quit.
 To test that this works, open another terminal and send a log message:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity log "This is a test!"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can provide 
\begin_inset Quotes eld
\end_inset

logtail
\begin_inset Quotes erd
\end_inset

 with the following optional parameters:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity logtail --connection=localhost:27017 --username=admin --password=admin
123 --db=logs --collection=common
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Service Plugin
\end_layout

\begin_layout Standard
This plugin lets you easily start and control any program as a daemon or
 service running in the background.
 This is achieved using Tanuki Software's excellent 
\begin_inset CommandInset href
LatexCommand href
name "Java Service Wrapper"
target "http://wrapper.tanukisoftware.com/"

\end_inset

 (or 
\begin_inset Quotes eld
\end_inset

JSW
\begin_inset Quotes erd
\end_inset

).
 JSW deploys a native process to monitor your daemon's health, is able to
 detect failures and hangs, and restarts in such cases.
 It supports many configuration options to control the JVM process, as well
 as support for JMX-based management for the wrapper.
 While you can start any program using the 
\begin_inset Quotes eld
\end_inset

sincerity start
\begin_inset Quotes erd
\end_inset

 command, it is strongly recommended that you use this plugin instead for
 production environments.
 It's so good, we wish it were included in the JVM!
\end_layout

\begin_layout Standard
JSW runs on an impressive array of JVM-capable operating systems: Linux,
 Mac OS X, Windows, Solaris, AIX, FreeBSD, HPUX, z/OS and z/Linux, supporting
 several 32bit and 64bit machine architectures for each.
 Of course, you do not want to install support for 
\emph on
all 
\emph default
of these platforms in your container, and so this plugin cleverly detects
 the underlying operating system and downloads the necessary native libraries
 on-demand the first time it is run.
 An error message will be displayed on unsupported platforms.
\end_layout

\begin_layout Standard
To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add service : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To start a program as a daemon:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity service myprogram start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above assumes that you have a 
\begin_inset Quotes eld
\end_inset

/programs/myprogram.js
\begin_inset Quotes erd
\end_inset

 file.
 (Programs can be written in languages other than JavaScript if they are
 installed in your container.) See the service wrapper's log at 
\begin_inset Quotes eld
\end_inset

/logs/service.log
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
To stop the daemon:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity service myprogram stop
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To restart it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity service myprogram restart
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To check its status:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity service myprogram status
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Additionally, you can run the wrapper in 
\begin_inset Quotes eld
\end_inset

console mode,
\begin_inset Quotes erd
\end_inset

 which outputs the wrapper's log to the console, and lets you easily stop
 it using CTRL+C.
 This is very useful for testing and debugging:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity service myprogram console
\end_layout

\end_inset


\end_layout

\begin_layout Quote
Note that Sincerity uses the Community Edition of JSW, which is licensed
 under the GPL (v2).
 Make sure that you understand the special implications of this license
 if you intend to redistribute your product.
 Furthermore, some Windows platforms (64bit x86 and Itanium) supported by
 the Standard/Professional Editions are not supported by the Community Edition.
 A commercial license is available for purchase without these limitations.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "license guide"
target "http://wrapper.tanukisoftware.com/doc/english/licenseOverview.html"

\end_inset

 for more information.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
This plugin generates some parts of the JSW configuration on the fly, but
 it can furthermore merge your custom settings into this configuration.
 To do so, edit 
\begin_inset Quotes eld
\end_inset

/configuration/service/service.conf
\begin_inset Quotes erd
\end_inset

.
 In particular, you might want to control the memory profile of your JVM,
 or configure the wrapper's logging.
 See the JSW 
\begin_inset CommandInset href
LatexCommand href
name "documentation"
target "http://wrapper.tanukisoftware.com/doc/english/properties.html"

\end_inset

 for more details.
\end_layout

\begin_layout Standard
Additionally, this plugin provides a flexible way for you to send arguments
 to the wrapped JVM.
 Any files under 
\begin_inset Quotes eld
\end_inset

/configuration/service/jvm/
\begin_inset Quotes erd
\end_inset

 with a 
\begin_inset Quotes eld
\end_inset

.conf
\begin_inset Quotes erd
\end_inset

 extension will be merged and added.
 The plugin comes installed with a few sensible defaults, and additionally
 other plugs may add their own 
\begin_inset Quotes eld
\end_inset

.conf
\begin_inset Quotes erd
\end_inset

 files to support the service plugin.
\end_layout

\begin_layout Standard
It may be useful to run your Sincerity service as an operating system service.
 On Unix-like systems, you can use a 
\begin_inset Quotes eld
\end_inset

system init script.
\begin_inset Quotes erd
\end_inset

 Below is a script template you may use.
 In our case, we are naming it 
\begin_inset Quotes eld
\end_inset

/etc/init.d/restlet
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#!/bin/sh
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

### BEGIN INIT INFO
\end_layout

\begin_layout Plain Layout

# Provides:          restlet
\end_layout

\begin_layout Plain Layout

# Required-Start:    $local_fs $remote_fs $network $syslog
\end_layout

\begin_layout Plain Layout

# Required-Stop:     $local_fs $remote_fs $network $syslog
\end_layout

\begin_layout Plain Layout

# Default-Start:     2 3 4 5
\end_layout

\begin_layout Plain Layout

# Default-Stop:      0 1 6
\end_layout

\begin_layout Plain Layout

# Short-Description: starts the Restlet component
\end_layout

\begin_layout Plain Layout

# Description:       starts the Restlet component using start-stop-daemon
\end_layout

\begin_layout Plain Layout

### END INIT INFO
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

SINCERITY=/path/to/sincerity/sincerity
\end_layout

\begin_layout Plain Layout

CONTAINER=/path/to/container
\end_layout

\begin_layout Plain Layout

SERVICE=restlet
\end_layout

\begin_layout Plain Layout

OWNER=myuser
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

COMMAND=$1
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

sudo -u "$OWNER" "$SINCERITY" use "$CONTAINER" : service "$SERVICE" "$COMMAND"
\end_layout

\begin_layout Plain Layout

exit 0 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You can start/stop your service by running this script directly, for example:
 
\begin_inset Quotes eld
\end_inset

sudo /etc/init.d/restlet start
\begin_inset Quotes erd
\end_inset

.
 On some operating systems, you may also use your 
\begin_inset Quotes eld
\end_inset

service
\begin_inset Quotes erd
\end_inset

 command, for example: 
\begin_inset Quotes eld
\end_inset

sudo service restlet start
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Make sure to edit the variables to point to the paths on your system.
 Note that the 
\begin_inset Quotes eld
\end_inset

OWNER
\begin_inset Quotes erd
\end_inset

 user will be used to run your service, and for security reasons you are
 strongly advised not to use 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

.
 It is best to create a special user for your service, and to set its permission
s according to only what it needs: read access to Sincerity and the container,
 and write access to the container's 
\begin_inset Quotes eld
\end_inset

/cache/
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

/logs/
\begin_inset Quotes erd
\end_inset

, and other relevant directories.
\end_layout

\begin_layout Standard
To have your service start automatically when the system starts depends
 on your operating system.
 For Linux, according the Linux Standard Base (LSB) specification, you need
 the 
\begin_inset Quotes eld
\end_inset

###
\begin_inset Quotes erd
\end_inset

 comment block listed above.
 Type 
\begin_inset Quotes eld
\end_inset

man insserv
\begin_inset Quotes erd
\end_inset

 for the documentation the block format.
 For consistency, make sure to change the 
\begin_inset Quotes eld
\end_inset

Provides:
\begin_inset Quotes erd
\end_inset

 entry to match the name of the file.
 To process this file and the block, run 
\begin_inset Quotes eld
\end_inset

sudo update-rc.d restlet defaults
\begin_inset Quotes erd
\end_inset

, which wraps 
\begin_inset Quotes eld
\end_inset

insserv
\begin_inset Quotes erd
\end_inset

 internally.
\end_layout

\begin_layout Subsubsection
Extras
\end_layout

\begin_layout Standard
To add 
\emph on
remote
\emph default
 JMX support:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add service.remote-jmx : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that this add-on is only required for 
\emph on
remote
\emph default
 JMX: 
\emph on
local
\emph default
 JMX is automatically supported by JSW.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "official documentation"
target "http://docs.oracle.com/javase/1.5.0/docs/guide/management/agent.html"

\end_inset

 for more information.
 Note also that the pitfalls of remote JMX (connectivity, security) can
 be elegantly circumvented via ssh tunneling.
\end_layout

\begin_layout Standard
Remote JMX introduces several challenges, especially when working behind
 firewalls.
 We've specially engineered this add-on by including a custom JVM agent,
 which allows the RMI Registry to run on a specific port, 1651, while the
 JMX port is at 1650.
 This is necessary because the default agent allocates the RMI Registry
 port randomly, making it impossible to configure firewalls.
 Note that you would then need to specify the RMI Registry port in the connectio
n URI, for example: 
\begin_inset Quotes eld
\end_inset

service:jmx:rmi://mysite.org:1650/jndi/rmi://mysite.org:1651/jmxrmi
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
For public servers, you most likely would also want to encrypt your JMX
 connections via SSL, as well as add password authentication.
 We've included the necessary options as comments in the configuration.
\end_layout

\begin_layout Standard
To configure, edit: 
\begin_inset Quotes eld
\end_inset

/configuration/service/jvm/remote-jmx.conf
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsection
Redistribution Plugin
\end_layout

\begin_layout Standard
This plugin lets you package your Sincerity container for convenient redistribut
ion.
 See the Sincerity standalone plugin for a different approach to distribution.
\end_layout

\begin_layout Standard
Currently, it supports creating a powerful cross-platform JVM-based graphical
 installer, using the excellent 
\begin_inset CommandInset href
LatexCommand href
name "IzPack"
target "http://izpack.org/"

\end_inset

 library.
 In the future, we hope to support additional distribution media.
\end_layout

\begin_layout Standard
To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add redistribution : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity izpack [application name] [version (optional, defaults to "1.0")]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For example, in a single command let's create an installable Nexus repository
 manager with a few plugins:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create nexus : add nexus : add logging : add service : add redistribut
ion : install : izpack "Nexus Repository Manager"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The result will be an 
\begin_inset Quotes eld
\end_inset

installer.jar
\begin_inset Quotes erd
\end_inset

 file in your container's root directory, which you can distribute.
 To install your application from this jar:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

java -jar installer.jar
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(Note that on some desktop environments double-clicking this file would
 also run it.)
\end_layout

\begin_layout Standard
The installed directory will contain a convenient 
\begin_inset Quotes eld
\end_inset

uninstaller.jar
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
To change the license, edit 
\begin_inset Quotes eld
\end_inset

/configuration/izpack/license.txt
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

/configuration/izpack/installer.xml
\begin_inset Quotes erd
\end_inset

 included with this plugin has sensible defaults that should work fine for
 many use cases, but you'll likely want to customize it.
 By default, it merges your Sincerity install in, and excludes IzPack itself,
 as well as the 
\begin_inset Quotes eld
\end_inset

/cache/
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

/logs/
\begin_inset Quotes erd
\end_inset

 directory.
 This guarantees that it would 
\begin_inset Quotes eld
\end_inset

just work
\begin_inset Quotes erd
\end_inset

 cleanly on any JVM with no pre-requisites.
\end_layout

\begin_layout Standard
Please see the 
\begin_inset CommandInset href
LatexCommand href
name "IzPack documentation"
target "http://izpack.org/documentation/installation-files.html"

\end_inset

 for full details.
 IzPack is very powerful, and can let you create modular, flexible distributions.
\end_layout

\begin_layout Subsection
Felix OSGi Plugin
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Apache Felix"
target "http://felix.apache.org/"

\end_inset

is flexible, straightforward 
\begin_inset CommandInset href
LatexCommand href
name "OSGi (R4)"
target "http://www.osgi.org/Specifications/HomePage"

\end_inset

 container.
\end_layout

\begin_layout Standard
As an example, let's install the web console.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

install http://archive.apache.org/dist/felix/org.apache.felix.http.jetty-2.2.0.jar
\end_layout

\begin_layout Plain Layout

install http://archive.apache.org/dist/felix/org.apache.felix.webconsole-3.1.8.jar
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You'll then need to start both bundles.
\end_layout

\begin_layout Standard
Point your browser to 
\begin_inset CommandInset href
LatexCommand href
target "http://localhost:8080/system/console/"

\end_inset

.
 The default user is 
\begin_inset Quotes eld
\end_inset

admin
\begin_inset Quotes erd
\end_inset

 with password 
\begin_inset Quotes eld
\end_inset

admin
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Markup Plugin
\end_layout

\begin_layout Standard
Need to quickly render markup text into HTML? Markdown, Confluence, MediaWiki,
 Twiki, Trac, Textile and Bugzilla Textile are all supported by this plugin.
 Markdown is supported by the 
\begin_inset CommandInset href
LatexCommand href
name "Pegdown"
target "https://github.com/sirthias/pegdown"

\end_inset

 engine, and the rest by 
\begin_inset CommandInset href
LatexCommand href
name "Mylyn WikiText"
target "http://wiki.eclipse.org/Mylyn/Incubator/WikiText"

\end_inset

.
 (While useful in itself, this plugin is intended to serve as a code example
 for using these libraries.)
\end_layout

\begin_layout Standard
The rendering engines themselves are not at first installed: the plugin
 will make sure that the engine you need is available, and install it if
 it's not, on demand.
\end_layout

\begin_layout Standard
To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add markup : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity render [language] [marked up source path] [rendered output path]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity render markdown README.md readme.html
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Batik SVG Plugin
\end_layout

\begin_layout Standard
Need to quickly render SVG into PDF, PNG or JPEG? This plugin uses 
\begin_inset CommandInset href
LatexCommand href
name "Apache Batik"
target "http://xmlgraphics.apache.org/batik/"

\end_inset

 to do so.
 (While useful in itself, this plugin is intended to serve as a code example
 for using Batik.)
\end_layout

\begin_layout Standard
To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add batik : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To use:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity render [SVG source path] [rendered output path]
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The output path extension will determine the output type.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity render test.svg test.pdf
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
JsDoc Plugin
\end_layout

\begin_layout Standard
Uses 
\begin_inset CommandInset href
LatexCommand href
name "JsDoc Toolkit"
target "http://code.google.com/p/jsdoc-toolkit/"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

jsdoc.sincerity
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Section
Skeletons
\end_layout

\begin_layout Standard
You've most likely come to Sincerity for the skeletons: they provide the
 easiest way to get started with all kinds of frameworks, servers and libraries,
 while Sincerity lets you easily add more features, more libraries and more
 languages as your project grows.
\end_layout

\begin_layout Subsubsection
Web Platforms
\end_layout

\begin_layout Itemize
Prudence
\end_layout

\begin_layout Itemize
Restlet
\end_layout

\begin_layout Itemize
Jetty (static web)
\end_layout

\begin_layout Itemize
Jetty (servlet/JSP container)
\end_layout

\begin_layout Subsubsection
Web Frameworks
\end_layout

\begin_layout Itemize
Savory
\end_layout

\begin_layout Itemize
Django
\end_layout

\begin_layout Itemize
Rails
\end_layout

\begin_layout Subsubsection
Databases
\end_layout

\begin_layout Itemize
OrientDB
\end_layout

\begin_layout Itemize
H2
\end_layout

\begin_layout Subsubsection
Middleware
\end_layout

\begin_layout Itemize
Hadoop
\end_layout

\begin_layout Itemize
Solr
\end_layout

\begin_layout Itemize
Felix
\end_layout

\begin_layout Itemize
Nexus
\end_layout

\begin_layout Subsection
Nexus Skeleton
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Sonatype's Nexus repository manager"
target "http://www.sonatype.org/nexus/"

\end_inset

is a recommended companion for Sincerity.
 At its most basic, it provides you with a proxy for accessing remote repositori
es, such as the Three Crickets repository in which many Sincerity packages
 are stored.
 Accessing repositories via a proxy provides you with much better performance
 and reliability.
 Nexus is a very powerful tool, and learning how to use it well will can
 go a long way towards improving your Sincerity experience.
\end_layout

\begin_layout Standard
With Sincerity, it's a piece of cake to install a working Nexus instance:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add nexus : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Give this a minute or two: Nexus has a 
\emph on
lot
\emph default
 of dependencies, though most are tiny.
\end_layout

\begin_layout Standard
To start the server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start jetty
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default port is 8080, so point your browser to 
\begin_inset CommandInset href
LatexCommand href
target "http://localhost:8080"

\end_inset

 to see your new Nexus repository manager.
 Nexus provides a rich web-based interface and includes excellent documentation.
\end_layout

\begin_layout Standard
Note that the Nexus skeleton relies on the standard Jetty servlet skeleton,
 to which you can indeed install other 
\begin_inset Quotes eld
\end_inset

contexts
\begin_inset Quotes erd
\end_inset

 (web applications).
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The default user is 
\begin_inset Quotes eld
\end_inset

admin
\begin_inset Quotes erd
\end_inset

 with password 
\begin_inset Quotes eld
\end_inset

admin123
\begin_inset Quotes erd
\end_inset

.
 You probably want to log in and change that password.
\end_layout

\begin_layout Standard
You may also want to change the default port from 8080, which you can do
 by editing 
\begin_inset Quotes eld
\end_inset

/server/connectors/default.js
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Otherwise, the default configuration should be quite sensible.
 It includes support for the standard repositories used by Sincerity, in
 addition to the Nexus defaults.
 Logging has also been configured to adhere to Sincerity's container structure,
 so that logs will appear under 
\begin_inset Quotes eld
\end_inset

/logs/
\begin_inset Quotes erd
\end_inset

.
 Note that Nexus itself will not use Sincerity's logging plugin, but you
 can configure Nexus logging right in the user interface.
\end_layout

\begin_layout Subsubsection
Extras
\end_layout

\begin_layout Standard
Two plugins are strongly recommended: logging and service.
 To install them:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add logging : add service : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that the Nexus application uses its own logging implementation, which
 must be configured internally.
 However, the logging plugin will be put to good use by the containing Jetty
 server.
\end_layout

\begin_layout Standard
The following command will install a Nexus repository with the recommended
 plugins into a Sincerity container created in the current directory, and
 then start it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create mycontainer : add nexus : add logging : add service : install
 : service jetty start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use mycontainer : service jetty stop
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Solr Skeleton
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Apache Solr"
target "http://lucene.apache.org/solr/"

\end_inset

 is a popular distributed textual search platform.
 It runs on the JVM and relies on the excellent 
\begin_inset CommandInset href
LatexCommand href
name "Lucene"
target "http://lucene.apache.org/"

\end_inset

 library for indexing and searching, but is accessed via simple network
 APIs, making it perfect for distributed deployments and heavy loads.
 Client libraries are available for many platforms, and are even integrated
 into the backends of many web development frameworks, such as Django and
 Ruby on Rails.
\end_layout

\begin_layout Standard
With Sincerity, it's a piece of cake to install a working Solr instance:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add solr : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To start the server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start jetty
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default port is 8080, so point your browser to 
\begin_inset CommandInset href
LatexCommand href
target "http://localhost:8080/solr/admin/"

\end_inset

 to see the main Solr administration page.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The skeleton comes with the example configuration supplied with the official
 Solr distribution, and should serve as a good starting point for the majority
 of project.
 The configuration is available under 
\begin_inset Quotes eld
\end_inset

/configuration/solr/conf/
\begin_inset Quotes erd
\end_inset

, and indexing and other data is stored in 
\begin_inset Quotes eld
\end_inset

/data/solr/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Solr is very configurable, both in terms of performance fine-tuning and
 language analysis and indexing.
 It also enjoys a range of useful plugins.
 See the official site for more information on fleshing out your skeleton.
\end_layout

\begin_layout Subsubsection
Extras
\end_layout

\begin_layout Standard
The service plugin is strongly recommended.
 To install it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add service : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that the logging plugin is already included in the skeleton, because
 Solr relies on SLF4J.
\end_layout

\begin_layout Standard
The following command will install a Solr server with the recommended plugins
 into a Sincerity container created in the current directory, and then start
 it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create mycontainer : add solr : add service : install : service
 jetty start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use mycontainer : service jetty stop
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Hadoop Skeleton
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Apache Hadoop"
target "http://hadoop.apache.org/"

\end_inset

 is a powerful platform for distributed computing, well known for its scalable
 
\begin_inset CommandInset href
LatexCommand href
name "distributed filesystem"
target "http://hadoop.apache.org/hdfs/"

\end_inset

 and popular 
\begin_inset CommandInset href
LatexCommand href
name "map-reduce module"
target "http://hadoop.apache.org/mapreduce/"

\end_inset

.
 It provides the underlying infrastructure for several data storage and
 analysis platforms, such as 
\begin_inset CommandInset href
LatexCommand href
name "Cassandra"
target "http://cassandra.apache.org/"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "HBase"
target "http://hbase.apache.org/"

\end_inset

, 
\begin_inset CommandInset href
LatexCommand href
name "Hive"
target "http://hive.apache.org/"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "Pig"
target "http://pig.apache.org/"

\end_inset

.
\end_layout

\begin_layout Standard
Hadoop runs best on Linux, where it relies on native libraries.
 This skeleton detects the underlying architecture and downloads the necessary
 native libraries on-demand.
\end_layout

\begin_layout Standard
With Sincerity, it's a piece of cake to install a working Hadoop instance.
 Note that we need to format the node first:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add hadoop : install : hadoop namenode -format
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(Note that the 
\begin_inset Quotes eld
\end_inset

namenode -format
\begin_inset Quotes erd
\end_inset

 command exits the JVM when done, so you cannot chain more commands after
 it.)
\end_layout

\begin_layout Standard
Then, to start the node:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity hadoop start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If this is the only node in your Hadoop cluster, you will need to wait about
 30 seconds for the services to fully initialize.
 To test copying files to and from the Hadoop filesystem:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity hadoop fs -put myfile.txt test.txt
\end_layout

\begin_layout Plain Layout

sincerity hadoop fs -get test.txt test.txt
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop the node:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity hadoop stop
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To see the status of the node services:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity hadoop status
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that Hadoop uses the service plugin to manage the node services.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The skeleton comes with a plugin that supports the 
\begin_inset CommandInset href
LatexCommand href
name "full list of Hadoop commands"
target "http://hadoop.apache.org/common/docs/current/commands_manual.html"

\end_inset

, and additionally supports 
\begin_inset Quotes eld
\end_inset

start
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

stop
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

status
\begin_inset Quotes erd
\end_inset

 to manage the services.
\end_layout

\begin_layout Standard
All logs are under 
\begin_inset Quotes eld
\end_inset

/logs/
\begin_inset Quotes erd
\end_inset

, and the data is stored in 
\begin_inset Quotes eld
\end_inset

/data/
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
To configure your instance, see 
\begin_inset Quotes eld
\end_inset

/configuration/hadoop/
\begin_inset Quotes erd
\end_inset

.
 The default configuration is based on that of the official Hadoop distribution,
 for 
\begin_inset CommandInset href
LatexCommand href
name "pseudo-distributed operation"
target "http://hadoop.apache.org/common/docs/current/single_node_setup.html#PseudoDistributed"

\end_inset

 on ports 8000 (name node) and 8001 (job tracker).
 The logging configuration is based on the logging plugin, but its essential
 setup has likewise been copied over from the official distribution.
\end_layout

\begin_layout Subsection
OrientDB Skeleton
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "OrientDB"
target "http://www.orientdb.org/"

\end_inset

 is a powerful document- and graph-oriented (
\begin_inset Quotes eld
\end_inset

NoSQL
\begin_inset Quotes erd
\end_inset

) database server designed for scalability.
 As a graph database, it supports the entire 
\begin_inset CommandInset href
LatexCommand href
name "Tinkerpop"
target "http://tinkerpop.com/"

\end_inset

 stack, including the 
\begin_inset CommandInset href
LatexCommand href
name "Gremlin"
target "https://github.com/tinkerpop/gremlin/wiki"

\end_inset

 graph traversal language, allowing you to easily port your application
 between different database implementations.
 For users needing features from traditional RDBMS, OrientDB also supports
 SQL and allows enforcing schemas on your collections.
\end_layout

\begin_layout Standard
If you're interested in a more traditional RDBMS, check out Sincerity's
 H2 skeleton.
\end_layout

\begin_layout Standard
The Sincerity OrientDB skeleton makes it easy to set up and run a single
 OrientDB instance, which can run on its own or as a node in a multi-master
 cluster.
 To install an OrientDB instance:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add orientdb : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To start the server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start orientdb
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default web port is 2480, so point your browser to 
\begin_inset CommandInset href
LatexCommand href
target "http://localhost:2480/studio/"

\end_inset

 to see the OrientDB Studio application.
\end_layout

\begin_layout Standard
To start the console:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity console
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the console, to connect to the demo 
\begin_inset Quotes eld
\end_inset

tinkerpop
\begin_inset Quotes erd
\end_inset

 database:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

orientdb> connect remote:localhost/tinkerpop admin admin
\end_layout

\begin_layout Plain Layout

orientdb> gremlin g.V[1]
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The OrientDB plugin also supports a 
\begin_inset Quotes eld
\end_inset

gremlin
\begin_inset Quotes erd
\end_inset

 command to get a pure Gremlin console, though note you can also run Gremlin
 code in the general OrientDB console by prefixing it with the 
\begin_inset Quotes eld
\end_inset

gremlin
\begin_inset Quotes erd
\end_inset

 command.
\end_layout

\begin_layout Standard
To configure your instance, start with 
\begin_inset Quotes eld
\end_inset

/configuration/orientdb/server.conf
\begin_inset Quotes erd
\end_inset

 (XML).
 The default 
\begin_inset Quotes eld
\end_inset

server.conf
\begin_inset Quotes erd
\end_inset

 also references 
\begin_inset Quotes eld
\end_inset

database.conf
\begin_inset Quotes erd
\end_inset

 (JSON) and 
\begin_inset Quotes eld
\end_inset

hazelcast.conf
\begin_inset Quotes erd
\end_inset

 (XML).
\end_layout

\begin_layout Standard
Additionally, 
\begin_inset Quotes eld
\end_inset

properties.conf
\begin_inset Quotes erd
\end_inset

 (properties sheet) can be used to set JVM system properties used by OrientDB.
\end_layout

\begin_layout Standard
Databases will be stored in the 
\begin_inset Quotes eld
\end_inset

/databases/
\begin_inset Quotes erd
\end_inset

 directory in your Sincerity container.
\end_layout

\begin_layout Subsubsection
Extras
\end_layout

\begin_layout Standard
Two plugins are strongly recommended: logging and service.
 To install them:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add logging : add service : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following command will install an OrientDB node with the recommended
 plugins into a Sincerity container created in the current directory, and
 then start it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create mycontainer : add orientdb : add logging : add service
 : install : service orientdb start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use mycontainer : service orientdb stop
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
H2 Skeleton
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "H2"
target "http://www.h2database.com/"

\end_inset

 is a lightweight-yet-powerful relational database management system (RDBMS).
 It can run both as a standalone server (supporting a PostgreSQL compatibility
 mode), or embedded in your JVM program.
\end_layout

\begin_layout Standard
If you're interested in non-relational (
\begin_inset Quotes eld
\end_inset

NoSQL
\begin_inset Quotes erd
\end_inset

) databases, check out Sincerity's OrientDB skeleton.
\end_layout

\begin_layout Standard
The Sincerity H2 skeleton is specifically designed to make it easy to run
 H2 in standalone server mode.
 To install an H2 instance:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add h2 : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To start the server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start h2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default web port is 8082, so point your browser to 
\begin_inset CommandInset href
LatexCommand href
target "http://localhost:8082/"

\end_inset

 to see the H2 Console application.
 Note that the web console application is useful not just for H2: it be
 used to connect to any JDBC URI, as long as you have the JDBC driver installed
 in your Sincerity container.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The H2 plugin supports all the tools that come with H2.
 You can use 
\begin_inset Quotes eld
\end_inset

sincerity help
\begin_inset Quotes erd
\end_inset

 to get a list of them.
 For example, to create a cluster:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create-cluster 
\backslash

\end_layout

\begin_layout Plain Layout

	-urlSource jdbc:h2:tcp://localhost:9101/test 
\backslash

\end_layout

\begin_layout Plain Layout

	-urlTarget jdbc:h2:tcp://localhost:9102/test 
\backslash

\end_layout

\begin_layout Plain Layout

	-user sa 
\backslash

\end_layout

\begin_layout Plain Layout

	-serverList localhost:9101,localhost:9102
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To configure your server, see 
\begin_inset Quotes eld
\end_inset

/configuration/h2/server.conf
\begin_inset Quotes erd
\end_inset

.
 Lines that are not empty and do not begin with 
\begin_inset Quotes eld
\end_inset

#
\begin_inset Quotes erd
\end_inset

 will be added as command line arguments to the 
\begin_inset Quotes eld
\end_inset

server
\begin_inset Quotes erd
\end_inset

 tool.
 In fact, you can create 
\begin_inset Quotes eld
\end_inset

.conf
\begin_inset Quotes erd
\end_inset

 files for all the H2 tools if you wish to set default command arguments
 for them.
 For example, 
\begin_inset Quotes eld
\end_inset

create-cluster.conf
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
By default, databases will be stored in the 
\begin_inset Quotes eld
\end_inset

/databases/
\begin_inset Quotes erd
\end_inset

 directory in your Sincerity container.
 However, note that H2's JDBC URI allows you to access database stored anywhere
 in the filesystem.
 If this is a security concern, you may want to consider running the H2
 server in a locked-down operating system user.
\end_layout

\begin_layout Subsubsection
Extras
\end_layout

\begin_layout Standard
Two plugins are strongly recommended: logging and service.
 To install them:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add logging : add service : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following command will install an H2 database server with the recommended
 plugins into a Sincerity container created in the current directory, and
 then start it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create mycontainer : add h2 : add logging : add service : install
 : service h2 start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use mycontainer : service h2 stop
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Jetty Web Server Skeleton
\end_layout

\begin_layout Standard
Need a web server for static files? No problem:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add jetty.web : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Jetty"
target "http://jetty.codehaus.org/jetty/"

\end_inset

is a very robust, modular web server with excellent asynchronous performance,
 and lots of features and extensions.
 With this skeleton we've provided you with the lightweight, bare minimum
 dependencies to serve just static files for a single web site.
\end_layout

\begin_layout Standard
To start you server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start jetty
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default port is 8080, so point your browser to 
\begin_inset CommandInset href
LatexCommand href
target "http://localhost:8080"

\end_inset

 to see the default welcoming page.
\end_layout

\begin_layout Standard
Jetty allows for much more sophistication than just serving a single web
 site, and for that we've provided a separate skeleton: 
\begin_inset Quotes eld
\end_inset

jetty.servlet
\begin_inset Quotes erd
\end_inset

.
 That skeleton supports multiple 
\begin_inset Quotes eld
\end_inset

contexts
\begin_inset Quotes erd
\end_inset

 under the server, as well as configuration of connectors, and of course
 servlets and web applications packaged as WAR files.
\end_layout

\begin_layout Standard
Additionally, Jetty is a recommended connector for Restlet.
 It's available as a skeleton add-on, 
\begin_inset Quotes eld
\end_inset

restlet.jetty
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
Just put your files under the container's 
\begin_inset Quotes eld
\end_inset

/web/
\begin_inset Quotes erd
\end_inset

 directory, using the usual rules for web servers: URLs are mapped to file
 paths under 
\begin_inset Quotes eld
\end_inset

/web/
\begin_inset Quotes erd
\end_inset

, and directory URLs are mapped to 
\begin_inset Quotes eld
\end_inset

index.html
\begin_inset Quotes erd
\end_inset

 files in that directory.
 MIME types are automatically guessed according to the common filename extension
s.
\end_layout

\begin_layout Standard
You can configure the server by editing 
\begin_inset Quotes eld
\end_inset

/programs/jetty.js
\begin_inset Quotes erd
\end_inset

.
 For example, you can change the port, add an SSL connector (for https URLs)
 and configure new MIME types.
\end_layout

\begin_layout Subsubsection
Extras
\end_layout

\begin_layout Standard
Two plugins are strongly recommended: logging and service.
 To install them:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add logging : add service : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following command will install a web server with the recommended plugins
 into a Sincerity container created in the current directory, and then start
 it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create mycontainer : add solr : add logging : add service : install
 : service jetty start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use mycontainer : service jetty stop
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Jetty Servlet/JSP Skeleton
\end_layout

\begin_layout Standard
Servlets let you generate dynamic content for a web site, usually using
 the Java language.
 There is a very large ecosystem of free servlets out there, including complete
 frameworks, that can help you develop dynamic applications.
\end_layout

\begin_layout Standard
To install a barebones servlet skeleton, based on 
\begin_inset CommandInset href
LatexCommand href
name "Jetty"
target "http://jetty.codehaus.org/jetty/"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add jetty.servlet : install
\end_layout

\end_inset

To start you server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start jetty
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default port is 8080, so point your browser to 
\begin_inset CommandInset href
LatexCommand href
target "http://localhost:8080"

\end_inset

.
 But, you won't see anything yet: this is a barebones skeleton waiting for
 you to add your application.
 You might want to start by installing 
\begin_inset Quotes eld
\end_inset

jetty.servlet.example
\begin_inset Quotes erd
\end_inset

 first.
\end_layout

\begin_layout Standard
Note that if you only intend to install Jetty as a simple web server for
 static files, then you can use a simpler skeleton: 
\begin_inset Quotes eld
\end_inset

jetty.web
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
As useful as servlets are, we recommend you take a look at the 
\begin_inset Quotes eld
\end_inset

restlet
\begin_inset Quotes erd
\end_inset

 skeleton if you want to build a dynamic web application in Java.
 And Restlet can use Jetty as its underlying connector.
\end_layout

\begin_layout Standard
And why stop there? Prudence (the 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 skeleton) builds on Restlet, letting you do all of that and more with your
 choice of JavaScript, Python, Ruby, PHP, Groovy or Clojure.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
Jetty's official distribution (which doesn't rely on Sincerity\SpecialChar \ldots{}
 yet) is a
 perfect example of why Sincerity needs to exist.
 
\begin_inset Quotes eld
\end_inset

Official
\begin_inset Quotes erd
\end_inset

 Jetty is a morass of XML files that effectively duplicate what a lightweight
 scripting language, like JavaScript does far more comprehensibly and with
 far greater power.
 If you're switching from 
\begin_inset Quotes eld
\end_inset

official
\begin_inset Quotes erd
\end_inset

 Jetty, then you're in for a treat, as well as a sigh of relief.
\end_layout

\begin_layout Subsubsection
Extras
\end_layout

\begin_layout Standard
Two add-ons are available: 
\begin_inset Quotes eld
\end_inset

jetty.servlet.jsp
\begin_inset Quotes erd
\end_inset

 adds support for JSP (JavaServer Pages), and 
\begin_inset Quotes eld
\end_inset

jetty.servlet.jmx
\begin_inset Quotes erd
\end_inset

 adds JMX support to your Jetty server, allowing you to manage it via VisualVM
 or JConsole.
 To install both:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add jetty.servlet.jsp : add jetty.servlet.jmx : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Also, a nice example of a Jetty server with multiple contexts is provided,
 with a static web server, a servlet container, and a web application installed
 as a WAR file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add jetty.servlet.example : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(You can install this on its own, and it will pull in the basic skeleton
 as a dependency.)
\end_layout

\begin_layout Standard
The example 
\begin_inset Quotes eld
\end_inset

/server/contexts/servlet-example/
\begin_inset Quotes erd
\end_inset

 is the most elaborate: it shows you how you can drop in Java source code
 for your servlets and have them compiled as the server starts.
\end_layout

\begin_layout Standard
Additionally, two plugins are strongly recommended: logging and service.
 To install them:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add logging : add service : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following command will install the servlet examples with the recommended
 plugins into a Sincerity container created in the current directory, and
 then start it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create mycontainer : add jetty.servlet.example : add logging : add
 service : install : service jetty start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use mycontainer : service jetty stop
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Restlet Skeleton
\end_layout

\begin_layout Standard
The 
\begin_inset CommandInset href
LatexCommand href
name "Restlet library"
target "http://www.restlet.org/"

\end_inset

 (
\begin_inset Quotes eld
\end_inset

Restlet
\begin_inset Quotes erd
\end_inset

 is a registered trademark of 
\begin_inset CommandInset href
LatexCommand href
name "Restlet S.A.S."
target "http://www.restlet.com/"

\end_inset

) lets you dynamically generate web content, but it goes beyond just responding
 to client requests: it lets you map RESTful resources to URIs, while handling
 all the tricky HTTP mechanics involved (content negotiation, conditional
 HTTP) and providing full, rich abstractions for routing, filtering and
 data presentation.
\end_layout

\begin_layout Standard
To install the minimal skeleton:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add restlet : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To start your Restlet component and its servers:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start restlet
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default port is 8080, so point your browser to 
\begin_inset CommandInset href
LatexCommand href
target "http://localhost:8080"

\end_inset

.
\end_layout

\begin_layout Standard
Restlet, on its own, requires you to code in Java, but 
\begin_inset CommandInset href
LatexCommand href
name "Prudence"
target "http://threecrickets.com/prudence/"

\end_inset

 (the 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 skeleton in Sincerity) builds on Restlet, letting you do all of the above
 with your choice of JavaScript, Python, Ruby, PHP, Groovy or Clojure.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
While Restlet requires you to write your resources in Java (see Prudence
 for an alternative that supports other languages), there is no reason for
 your bootstrapping code---the code that assembles your component, servers,
 clients, hosts and routes---to be so rigid.
 The API for boostrapping your component is simple and elegant enough, but
 without Sincerity you would have to likely have to write it in Java, or
 implement your own bootstrapping mechanism.
\end_layout

\begin_layout Standard
JavaScript, Sincerity's natural language, provides a much more lightweight
 solution, and one that does not require you to recompile anything when
 all you want to change is your configuration.
 Of course, once your component is up and running, JavaScript plays no more
 role.
 We mention that in case you're worried about performance, though you shouldn't
 be: the language engine is likely not the source of any bottlenecks in
 your application's performance
\end_layout

\begin_layout Standard
The skeleton follows the structure of Restlet, which in turn closely adheres
 to Roy Fielding's original terminology for 
\begin_inset CommandInset href
LatexCommand href
name "Representational State Transfer (REST)"
target "http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm"

\end_inset

.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

/component/
\begin_inset Quotes erd
\end_inset

 directory is the basis for your REST component.
\end_layout

\begin_layout Standard
Under 
\begin_inset Quotes eld
\end_inset

/component/servers/
\begin_inset Quotes erd
\end_inset

 you can create files for HTTP servers bound to your component.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "API documentation"
target "http://www.restlet.org/documentation/2.1/jse/api/index.html?org/restlet/Server.html"

\end_inset

.
 The default is a single HTTP server is created on port 8080, but you can
 create additional servers.
 The technology used for the servers is called a 
\begin_inset Quotes eld
\end_inset

connector,
\begin_inset Quotes erd
\end_inset

 and is pluggable in Restlet.
 Connectors cannot be selected by API calls; rather, they are installed
 automatically if they are discovered in the classpath.
 By default, the Sincerity skeleton for Restlet relies on Restlet's internal
 connector, but it is not recommended for production applications.
 See 
\begin_inset Quotes eld
\end_inset

Extras
\begin_inset Quotes erd
\end_inset

 below on how to install other connectors.
\end_layout

\begin_layout Standard
A quick and easy way to change the port for the default server is to set
 the environment variable is 
\begin_inset Quotes eld
\end_inset

RESTLET_PORT
\begin_inset Quotes erd
\end_inset

 (or the 
\begin_inset Quotes eld
\end_inset

restlet.port
\begin_inset Quotes erd
\end_inset

 JVM property):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

RESTLET_PORT=80 sincerity start restlet
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Under 
\begin_inset Quotes eld
\end_inset

/component/hosts/
\begin_inset Quotes erd
\end_inset

 you can create files for virtual hosts.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "API documentation"
target "http://www.restlet.org/documentation/2.1/jse/api/index.html?org/restlet/routing/VirtualHost.html"

\end_inset

.
 The default host has no filters, meaning that 
\emph on
all 
\emph default
requests from 
\emph on
all 
\emph default
servers will be routed to it.
 If you need several virtual hosts, you will want to make the default host
 less inclusive, or do away with a default host entirely.
 (The default host is merely a Restlet convenience and is not required for
 a component.) Applications can be attached to one or more hosts (see below).
\end_layout

\begin_layout Standard
Under 
\begin_inset Quotes eld
\end_inset

/component/clients/
\begin_inset Quotes erd
\end_inset

 you can create files for clients supported by your component.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "API documentation"
target "http://www.restlet.org/documentation/2.1/jse/api/index.html?org/restlet/Client.html"

\end_inset

.
 As with servers, client technologies are 
\begin_inset Quotes eld
\end_inset

connectors
\begin_inset Quotes erd
\end_inset

 installed on the classpath.
 Each connector handles a specific URI protocol, such as 
\begin_inset Quotes eld
\end_inset

http:
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

https:
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

file:
\begin_inset Quotes erd
\end_inset

.
 The skeleton defines no clients by default, but you can create files here
 for each client you need.
 See the Restlet example (in 
\begin_inset Quotes eld
\end_inset

Extras
\begin_inset Quotes erd
\end_inset

 below) for the usage of a 
\begin_inset Quotes eld
\end_inset

file:
\begin_inset Quotes erd
\end_inset

 client.
 (The 
\begin_inset Quotes eld
\end_inset

file:
\begin_inset Quotes erd
\end_inset

 client is required internally by the Restlet Directory resource.) Note that
 the Restlet internal connector can handle 
\begin_inset Quotes eld
\end_inset

http:
\begin_inset Quotes erd
\end_inset

, but not 
\begin_inset Quotes eld
\end_inset

https:
\begin_inset Quotes erd
\end_inset

.
 To add support for 
\begin_inset Quotes eld
\end_inset

https:
\begin_inset Quotes erd
\end_inset

, you can install the Apache HttpClient connector.
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

/component/services/
\begin_inset Quotes erd
\end_inset

 is used to configure 
\begin_inset CommandInset href
LatexCommand href
name "Restlet services"
target "http://www.restlet.org/documentation/2.1/jse/api/index.html?org/restlet/service/package-summary.html"

\end_inset

, such as ConnegService, TunnelService, EncoderService, etc.
 By default only the LogService is configured.
\end_layout

\begin_layout Standard
Finally, 
\begin_inset Quotes eld
\end_inset

/component/applications/
\begin_inset Quotes erd
\end_inset

 is where you can create your Restlet applications.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "API documentation"
target "http://www.restlet.org/documentation/2.1/jse/api/index.html?org/restlet/Application.html"

\end_inset

.
 Though you can attach applications directly to your component, it is recommende
d that you attach them to virtual hosts, even if it's just the default host,
 as it allows you more routing flexibility.
 Also, though there is no requirement to do so, most Restlet applications
 will probably have a 
\begin_inset CommandInset href
LatexCommand href
name "Router"
target "http://www.restlet.org/documentation/2.1/jse/api/index.html?org/restlet/routing/Router.html"

\end_inset

 as their inbound root.
 It is crucial that you understand how routing works in Restlet: from server,
 through host, through application, through router, and finally to your
 RESTful resources.
 Please refer to the Restlet documentation for full details.
 Note that the skeleton does not include any application by default: see
 
\begin_inset Quotes eld
\end_inset

Extras
\begin_inset Quotes erd
\end_inset

 below for a full example.
\end_layout

\begin_layout Standard
It may be useful during development to start only a few select applications.
 This can be done by setting the 
\begin_inset Quotes eld
\end_inset

RESTLET_APPLICATIONS
\begin_inset Quotes erd
\end_inset

 environment variable (or the 
\begin_inset Quotes eld
\end_inset

restlet.applications
\begin_inset Quotes erd
\end_inset

 JVM property) to a comma-separated list of application directory names.
 For example, a command line to run 
\emph on
only
\emph default
 the Restlet example application:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

RESTLET_APPLICATIONS=restlet-example sincerity start restlet
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Extras
\end_layout

\begin_layout Standard
A simple example Restlet application, with a custom resource as well as
 static content:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add restlet.example : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(You can install this on its own, and it will pull in the basic skeleton
 as a dependency.)
\end_layout

\begin_layout Standard
The example at 
\begin_inset Quotes eld
\end_inset

/component/applications/example/
\begin_inset Quotes erd
\end_inset

 shows you how you can drop in Java source code for your resources and have
 it compiled automatically.
\end_layout

\begin_layout Standard
The skeleton does not install any connectors by default, relying instead
 on the default connector.
 To install the 
\begin_inset CommandInset href
LatexCommand href
name "Jetty"
target "http://jetty.codehaus.org/jetty/"

\end_inset

 server connector:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add restlet.jetty : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To install the 
\begin_inset CommandInset href
LatexCommand href
name "Apache HttpClient"
target "http://hc.apache.org/httpcomponents-client-ga/"

\end_inset

 connector:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add restlet.httpclient : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Additionally, two plugins are strongly recommended: logging and service.
 To install them:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add restlet.logging : add service : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
(Note that 
\begin_inset Quotes eld
\end_inset

restlet.logging
\begin_inset Quotes erd
\end_inset

 is preferred over Sincerity's 
\begin_inset Quotes eld
\end_inset

logging
\begin_inset Quotes erd
\end_inset

 plugin.
 The former relies on the latter, but adds a Restlet library that provides
 a direct chute to SLF4J, whici is more efficient than bridging.)
\end_layout

\begin_layout Standard
The following command will install the Restlet example with the recommended
 plugins into a Sincerity container created in the current directory, and
 then start it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create mycontainer : add restlet.example : add restlet.logging :
 add service : install : service restlet start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use mycontainer : service restlet stop
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Felix Skeleton
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Subsection
Prudence Skeleton
\end_layout

\begin_layout Standard
Since version 2.0, 
\begin_inset CommandInset href
LatexCommand href
name "Prudence"
target "http://threecrickets.com/prudence/"

\end_inset

 is designed from the ground-up around Sincerity.
 It's distributed exclusively as a Sincerity skeleton with a large collection
 of tightly integrated add-ons.
\end_layout

\begin_layout Standard
The Prudence skeleton is an extension of the Restlet skeleton, so the documentat
ion there applies here.
\end_layout

\begin_layout Standard
Prudence is underlying platform for 
\begin_inset CommandInset href
LatexCommand href
name "Diligence"
target "http://threecrickets.com/diligence/"

\end_inset

.
\end_layout

\begin_layout Standard
(Historically, it was actually the other way around.
 Sincerity was designed by Three Crickets precisely in order to make Prudence
 2.0 sanely modular, building on many lessons learned while deploying Prudence
 1.0 and 1.1.
 It was clear during development that there was nothing in the proposed
 solution that was specific to Prudence.
 And so Sincerity was born as a generic tool useful for many JVM projects.)
\end_layout

\begin_layout Subsection
Diligence Skeleton
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Diligence"
target "http://threecrickets.com/diligence/"

\end_inset

 lets you develop scalable data-driven web applications in server-side JavaScrip
t, centering on 
\begin_inset CommandInset href
LatexCommand href
name "MongoDB"
target "http://www.mongodb.org/"

\end_inset

 as its data provider and 
\begin_inset CommandInset href
LatexCommand href
name "Prudence"
target "http://threecrickets.com/prudence/"

\end_inset

 as its RESTful base.
 It features strong integration with client-side 
\begin_inset Quotes eld
\end_inset

AJAX,
\begin_inset Quotes erd
\end_inset

 notably 
\begin_inset CommandInset href
LatexCommand href
name "Ext JS"
target "http://www.sencha.com/products/extjs"

\end_inset

 and 
\begin_inset CommandInset href
LatexCommand href
name "Sencha Touch"
target "http://www.sencha.com/products/touch/"

\end_inset

, and clean-room integration with Facebook, Twitter, Google, etc.
 Services include a scalable email notification system, robust sitemap generatio
n (with special support for 
\emph on
very 
\emph default
large sites), authentication and authorization, and support for several
 markup languages.
\end_layout

\begin_layout Standard
The Diligence skeleton is an extension of the Prudence and Restlet skeletons,
 so the documentation there applies here.
\end_layout

\begin_layout Standard
(Like Sincerity and Prudence, Diligence is developed by Three Crickets.
 The three products together form a powerful web application stack on top
 of the JVM.)
\end_layout

\begin_layout Subsection
Rails Skeleton
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Ruby on Rails"
target "http://rubyonrails.org/"

\end_inset

, or just 
\begin_inset Quotes eld
\end_inset

Rails,
\begin_inset Quotes erd
\end_inset

 is a popular web development framework for the Ruby programming language.
 It combines a traditional MVC approach with a RESTful orientation backed
 by relational database stores (MySQL, Postgres).
 Rails enjoys the elegant, often-imitated, ActiveRecord ORM, and a powerful
 
\begin_inset Quotes eld
\end_inset

scaffolding
\begin_inset Quotes erd
\end_inset

 feature that automatically generates models, views and controllers to which
 you can add your code.
 
\end_layout

\begin_layout Standard
Rails is known to work very well on the JVM, but it can sometimes be painful
 to install everything and get it running.
 The Sincerity skeleton can do it all for you with one command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add rails : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This may take a minute or two: Rails is quite massive.
\end_layout

\begin_layout Standard
To start you server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start rails
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default port is 3000, so point your browser to 
\begin_inset CommandInset href
LatexCommand href
target "http://localhost:3000"

\end_inset

.
\end_layout

\begin_layout Standard
If you're looking for a more strictly RESTful, minimalist alternative to
 Rails, while sticking to Ruby, take a look at 
\begin_inset CommandInset href
LatexCommand href
name "Prudence"
target "http://threecrickets.com/prudence/"

\end_inset

 (the 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 skeleton).
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The skeleton will create an application for you under 
\begin_inset Quotes eld
\end_inset

/app/
\begin_inset Quotes erd
\end_inset

, so you don't have to run 
\begin_inset Quotes eld
\end_inset

rails new
\begin_inset Quotes erd
\end_inset

 to create one.
 Indeed, the correct way to start a new Rails project in Sincerity is simply
 to create a new container for it.
 That's the whole point of Sincerity!
\end_layout

\begin_layout Standard
The skeleton comes with a plugin to handle the 
\begin_inset Quotes eld
\end_inset

rails
\begin_inset Quotes erd
\end_inset

 tool for you, similarly to how Sincerity's Ruby plugin adds commands for
 common Ruby tools, such as 
\begin_inset Quotes eld
\end_inset

gem
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

rake
\begin_inset Quotes erd
\end_inset

.
 The benefit of this approach is that you do not have to explicitly change
 to the 
\begin_inset Quotes eld
\end_inset

/app/
\begin_inset Quotes erd
\end_inset

 directory to run the tool, and indeed you can chain it as is usual with
 Sincerity commands.
 It should work identically to the usual 
\begin_inset Quotes eld
\end_inset

rails
\begin_inset Quotes erd
\end_inset

 command: simple prefix 
\begin_inset Quotes eld
\end_inset

sincerity
\begin_inset Quotes erd
\end_inset

 to it.
 Examples:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity rails generate controller home index
\end_layout

\begin_layout Plain Layout

sincerity rails generate scaffold Post name:string title:string content:text
\end_layout

\begin_layout Plain Layout

sincerity rake db:migrate
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Or as one Sincerity command:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use mycontainer : rails generate controller home index : rails
 generate scaffold Post name:string title:string content:text : rake db:migrate
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A quick note: Ruby is a bit sluggish to start up on the JVM, which you will
 notice when running 
\begin_inset Quotes eld
\end_inset

rails
\begin_inset Quotes erd
\end_inset

.
 However, don't let this worry you: once it's up and running, your Rails
 application will perform marvelously.
\end_layout

\begin_layout Standard
And that's it: from here on, it's all standard Rails goodness.
 You can go ahead with the tutorial at http://guides.rubyonrails.org/getting_start
ed.html, skipping step 3.2 (
\begin_inset Quotes eld
\end_inset

Creating the Blog Application
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Standard
MySQL, PostgreSQL and SQLite are all supported out of the box, identically
 to how Rails works on other platforms.
\end_layout

\begin_layout Standard
If you need to access the Rails source code, you'll find it under 
\begin_inset Quotes eld
\end_inset

/libraries/ruby/lib/ruby/gems/1.8/gems/
\begin_inset Quotes erd
\end_inset

, which is where all Ruby gems will be installed in your container.
\end_layout

\begin_layout Subsubsection
Extras
\end_layout

\begin_layout Standard
Though the 
\begin_inset Quotes eld
\end_inset

rails
\begin_inset Quotes erd
\end_inset

 tool does support a daemon mode, Sincerity's service plugin is far more
 powerful and is strongly recommended.
 To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add service : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following command will install the Rails skeleton with the recommended
 plugins into a Sincerity container created in the current directory, and
 then start it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create mycontainer : add rails : add service : install : service
 rails start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use mycontainer : service rails stop
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that Sincerity's logging plugin won't do you much good out of the box,
 because Rails uses Ruby's logging system, not the JVM's.
 However, it should be easy implement your own Ruby logger that delegates
 to standard JVM logging if that seems exciting to you.
\end_layout

\begin_layout Subsection
Django Skeleton
\end_layout

\begin_layout Standard
\begin_inset CommandInset href
LatexCommand href
name "Django"
target "https://www.djangoproject.com/"

\end_inset

 is a popular web development framework for the Python programming language.
 It relies on a traditional MVC approach backed by relational database stores
 (MySQL, Postgres).
 Django enjoys a strong ecosystem of drop-in features and snippets, but
 also provides a lot of features right in the box.
 Much the appeal of Django is the Python programming language: elegant,
 clean and supported by what must be the friendliest and most welcoming
 community of any programming language.
\end_layout

\begin_layout Standard
There are many advantages in running Django on the JVM instead of on the
 CPython reference platform: great performance, much improved scalability
 (there is no GIL in Jython), as well as access to any JVM library 
\emph on
in addition 
\emph default
to Python libraries.
 Of course, Sincerity makes it extremely easy and transparent to add both
 kinds of libraries as dependencies.
\end_layout

\begin_layout Standard
If you're looking for RESTful, minimalist alternative to Django, while sticking
 to Python, take a look at Prudence (the 
\begin_inset Quotes eld
\end_inset

prudence
\begin_inset Quotes erd
\end_inset

 skeleton).
\end_layout

\begin_layout Standard
Django can be difficult to install and get running on Jython, but of course
 it's trivial with Sincerity:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add django : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This may take a minute or two: Django is quite massive!
\end_layout

\begin_layout Standard
To start you server:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start django
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The default port is 8000, so point your browser to 
\begin_inset CommandInset href
LatexCommand href
target "http://localhost:8000"

\end_inset

.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
The skeleton already has a minimal project ready for you under 
\begin_inset Quotes eld
\end_inset

/project/
\begin_inset Quotes erd
\end_inset

, so you don't have to run 
\begin_inset Quotes eld
\end_inset

django-admin.py startproject
\begin_inset Quotes erd
\end_inset

 to create one.
 Indeed, the correct way to start a new Django project in Sincerity is simply
 to create a new container for it.
 That's the whole point of Sincerity!
\end_layout

\begin_layout Standard
However, if you need to access 
\begin_inset Quotes eld
\end_inset

django-admin.py
\begin_inset Quotes erd
\end_inset

, it is located under your 
\begin_inset Quotes eld
\end_inset

/executables/
\begin_inset Quotes erd
\end_inset

 directory, so:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity execute django-admin.py
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Much of the work with Django involves running 
\begin_inset Quotes eld
\end_inset

manage.py
\begin_inset Quotes erd
\end_inset

, which in this skeleton is located under 
\begin_inset Quotes eld
\end_inset

/project/manage.py
\begin_inset Quotes erd
\end_inset

.
 You can run it easily, from anywhere in the container, with a handy plugin:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity manage
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A quick note: Python is a bit sluggish to start up on the JVM, which you
 will notice when running 
\begin_inset Quotes eld
\end_inset

manage
\begin_inset Quotes erd
\end_inset

.
 However, don't let this worry you: once it's up and running, your Django
 application will perform marvelously.
\end_layout

\begin_layout Standard
And that's it: from here on, it's all standard Django goodness.
 You can go ahead with the 
\begin_inset CommandInset href
LatexCommand href
name "tutorial"
target "https://docs.djangoproject.com/en/1.4/intro/tutorial01/"

\end_inset

, skipping the short 
\begin_inset Quotes eld
\end_inset

Creating a project
\begin_inset Quotes erd
\end_inset

 step.
\end_layout

\begin_layout Standard
Well, just one quick note: the database backend uses JDBC drivers (the JVM's
 relational database interface) instead of Python drivers, so the database
 engine names in your 
\begin_inset Quotes eld
\end_inset

settings.py
\begin_inset Quotes erd
\end_inset

 are a little bit different than in the official tutorial.
 You'll see the supported options commented in 
\begin_inset Quotes eld
\end_inset

settings.py
\begin_inset Quotes erd
\end_inset

.
 JDBC drivers for MySQL and PostgreSQL are included in the skeleton, but
 you must install the Oracle JDBC driver on your own.
 Also note that SQLite is not supported at this time.
\end_layout

\begin_layout Standard
If you need to access the Django source code, you'll find it under 
\begin_inset Quotes eld
\end_inset

/libraries/python/Lib/site-packages/
\begin_inset Quotes erd
\end_inset

, which is where all Python libraries will be installed in your container.
\end_layout

\begin_layout Subsubsection
Extras
\end_layout

\begin_layout Standard
Adding the service plugin is strongly recommended.
 To install:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add service : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The following command will install the Django skeleton with the recommended
 plugins into a Sincerity container created in the current directory, and
 then start it a service:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity create mycontainer : add django : add service : install : service
 django start
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To stop it:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity use mycontainer : service django stop
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that Sincerity's logging plugin won't do you much good out of the box,
 because Django uses Python's logging system, not the JVM's.
 However, it should be easy implement your own Python logger that delegates
 to standard JVM logging if that seems exciting to you.
\end_layout

\begin_layout Subsection
LWJGL Skeleton
\end_layout

\begin_layout Standard
The JVM is growing in popularity as a platform for game designers, due to
 its ability to easily have the game run on many operating systems, as well
 as in browsers.
 Much of this growth is due to the excellent 
\begin_inset CommandInset href
LatexCommand href
name "LWJGL library"
target "http://www.lwjgl.org/"

\end_inset

, which makes easy to use hardware-accelerated features, such as 3D graphics
 and 3D sound, and to accept input from gaming controllers.
 LWJGL relies on native extensions to the JVM, and supports Linux, Windows,
 Mac OS X and Solaris.
 The author's favorite game, 
\begin_inset CommandInset href
LatexCommand href
name "Minecraft"
target "http://www.minecraft.net/"

\end_inset

, is based on it!
\end_layout

\begin_layout Standard
To install the barebones skeleton:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity add lwjgl : install
\end_layout

\end_inset


\end_layout

\begin_layout Standard
To start your game:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity start lwjgl
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This 
\begin_inset Quotes eld
\end_inset

lwjgl
\begin_inset Quotes erd
\end_inset

 program will detect your operating system, install the relevant native
 binaries into the container (if they aren't already installed), and then
 start the 
\begin_inset Quotes eld
\end_inset

game
\begin_inset Quotes erd
\end_inset

 program\SpecialChar \ldots{}
 except that with this barebones skeleton, there is no game to start.
 For something to play with, see the 
\begin_inset Quotes eld
\end_inset

lwjgl.example
\begin_inset Quotes erd
\end_inset

 skeleton.
 It includes a simple Space Invaders clone.
\end_layout

\begin_layout Subsubsection
Fleshing Out
\end_layout

\begin_layout Standard
Create a 
\begin_inset Quotes eld
\end_inset

/programs/game.js
\begin_inset Quotes erd
\end_inset

 that starts up your game.
 If you want your game to be written only in Java, this likely means delegating
 to your main class, like this:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

sincerity.run('delegate:main', ['org.mycoolgame.Main'])
\end_layout

\end_inset


\end_layout

\begin_layout Standard
However, don't rule out writing your game in JavaScript, or the host of
 other languages easily installable in Sincerity! You can even 
\begin_inset Quotes eld
\end_inset

drop down
\begin_inset Quotes erd
\end_inset

 to Java when you some low-level work, and keep the main game logic in a
 higher-level language.
\end_layout

\begin_layout Standard
This is especially useful if you want to provide a way for the community
 to provide plugins for your game: it would make it easier for novice programmer
s to contribute, and also allow such plugins to be distributed as simple
 text files.
 If you go this route, consider using Scripturian to allow high-performance,
 muli-threaded integration of the language engines.
 (Scripturian is the same library Sincerity uses for its plugins.)
\end_layout

\begin_layout Section
Libraries
\end_layout

\begin_layout Subsection
The Sincerity JsDoc Template
\end_layout

\begin_layout Standard
Note that you need to host the documentation via HTTP.
 File does not work.
\end_layout

\begin_layout Section
Programming
\end_layout

\begin_layout Subsection
Scripturian
\end_layout

\begin_layout Subsection
The Sincerity JavaScript Library
\end_layout

\begin_layout Standard
Sincerity relies on JavaScript for bootstrapping and plugins, and while
 JavaScript does not have a standard library, you do have access to the
 entire JVM standard library.
\end_layout

\begin_layout Standard
Still, this isn't quite good enough: using JVM libraries works, but they
 do involve using paradigms that have not been optimized for JavaScript.
\end_layout

\begin_layout Standard
For Sincerity, we decided that we can do better, and so we present you with
 a collection of useful code called the Sincerity JavaScript Library.
 We should point out from the start that this is not a general-purpose JavaScrip
t library: it relies on the JVM libraries, and only works in the JVM.
 There are also a few optimizations specific to the Rhino engine, which
 is the only JavaScript engine for the JVM at the moment, but we plan to
 support Oracle's Nashorn, which is scheduled to be included in JVM 8.
\end_layout

\begin_layout Standard
What follows is a general introduction to the library.
 See the API documentation for full details.
 Also make sure to check out Sincerity's JsDoc plugin which makes it easy
 for you to generate similar documentation for your own JavaScript codebase.
\end_layout

\begin_layout Standard
Note that the Sincerity Foundation Library is used by at least two other
 JavaScript frameworks: the Prudence JavaScript Library, and the Diligence
 Framework, which builds on the Prudence JavaScript Library.
\end_layout

\begin_layout Paragraph
Objects
\end_layout

\begin_layout Standard
Enhanced support for standard JavaScript types: strings, arrays, dicts and
 dates.
 This library monkey-patches the standard types with many useful methods.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Objects API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Objects"

\end_inset

.
\end_layout

\begin_layout Paragraph
Classes
\end_layout

\begin_layout Standard
This straightforward-but-powerful library lets you use the object-oriented
 programming (OOP) paradigm in JavaScript.
 It lets you define classes with public and private members, inherit classes,
 and even provides a mechanism for generation of constructors.
 Generally, the Sincerity JavaScript Library does not use OOP indiscriminately:
 classes are used only when they make sense and add elegance.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Classes API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Classes"

\end_inset

.
\end_layout

\begin_layout Paragraph
Iterators
\end_layout

\begin_layout Standard
Iterators let you write coherent code that can efficiently comprehend and
 operate on sequences of any size.
 Its design borrows stylistically from functional programming languages.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Iterators API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Iterators"

\end_inset

.
\end_layout

\begin_layout Paragraph
Files
\end_layout

\begin_layout Standard
Low-level access to the filesystem, including high-performance reading and
 writing of files using memory-mapped files.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Files API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Files"

\end_inset

.
\end_layout

\begin_layout Paragraph
Templates
\end_layout

\begin_layout Standard
Straightforward and flexible string interpolation.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

println('Hello, {user}'.cast({user: 'Sincerity'})
\end_layout

\end_inset


\end_layout

\begin_layout Standard
See the 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Templates API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Templates"

\end_inset

.
\end_layout

\begin_layout Paragraph
JSON
\end_layout

\begin_layout Standard
High-performance JSON parsing and rendering using the 
\begin_inset CommandInset href
LatexCommand href
name "JSON Rhino library"
target "http://code.google.com/p/json-rhino/"

\end_inset

, which is written in Java.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.JSON API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.JSON"

\end_inset

.
\end_layout

\begin_layout Paragraph
XML
\end_layout

\begin_layout Standard
High-performance XML parsing and rendering using the standard JVM libraries.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Objects API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Objects"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Sincerity.XML API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.XML"

\end_inset

.
\end_layout

\begin_layout Paragraph
Calendar
\end_layout

\begin_layout Standard
Enhancements to JavaScript's standard Date type.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Calendar API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Calendar"

\end_inset

.
\end_layout

\begin_layout Paragraph
Localization
\end_layout

\begin_layout Standard
Easy access to the JVM's localization libraries, including formatting for
 dates, times and currencies.
 See the 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Localization API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Localization"

\end_inset

.
\end_layout

\begin_layout Paragraph
Cryptography
\end_layout

\begin_layout Standard
Easy access to the JVM's cryptography libraries, including shortcuts for
 common hashing, encryption and decryption tasks.
 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Cryptography API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Cryptography"

\end_inset


\end_layout

\begin_layout Paragraph
JVM
\end_layout

\begin_layout Standard
Easy conversions between JVM and JavaScript types, and also access to a
 few operating system services.
 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Localization API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Localization"

\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Sincerity.JVM API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.JVM"

\end_inset


\end_layout

\begin_layout Paragraph
Validation
\end_layout

\begin_layout Standard
A general-purpose user input validation library for commonly used types,
 such as numbers and email addresses.
 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Validation API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Validation"

\end_inset


\end_layout

\begin_layout Paragraph
Mail
\end_layout

\begin_layout Standard
Easy access to JavaMail, including sending of mixed-media plain-text/HTML
 emails.
 Uses the templates library to let you easily create email templates.
 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Mail API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Mail"

\end_inset


\end_layout

\begin_layout Paragraph
Lucene
\end_layout

\begin_layout Standard
Easy access to the Lucene search engine.
 Supports the iterators library, so you can easily index very large collections
 of documents.
 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Lucene API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Lucene"

\end_inset


\end_layout

\begin_layout Paragraph
Rhino
\end_layout

\begin_layout Standard
Access to features of the Rhino JavaScript engine, such as the call stack
 and exception details.
 
\begin_inset CommandInset href
LatexCommand href
name "Sincerity.Rhino API documentation"
target "http://threecrickets.com/api/javascript/?namespace=Sincerity.Rhino"

\end_inset


\end_layout

\begin_layout Section
Extending Sincerity
\end_layout

\begin_layout Subsection
Developing Plugins
\end_layout

\begin_layout Standard
Make sure you understand that dependencies may be installed in arbitrary
 order.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

document.executeOnce('/sincerity/jvm/')
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

try {
\end_layout

\begin_layout Plain Layout

	document.executeOnce('/mongo-db/')
\end_layout

\begin_layout Plain Layout

} catch(x) { /* the dependency may not have been installed yet! */ }
\end_layout

\end_inset


\end_layout

\begin_layout Section
Eclipse Integration
\end_layout

\begin_layout Subsection
Installing
\end_layout

\begin_layout Standard
http://repository.threecrickets.com/eclipse/
\end_layout

\begin_layout Subsection
Preferences
\end_layout

\begin_layout Standard
Using internal or external Sincerity installation.
\end_layout

\begin_layout Subsection
Sincerity Projects
\end_layout

\begin_layout Subsubsection
Converting to Sincerity
\end_layout

\begin_layout Standard
Adds the Sincerity nature.
\end_layout

\begin_layout Subsubsection
Sincerity Classpath
\end_layout

\begin_layout Standard
Java projects only.
\end_layout

\begin_layout Subsection
Sincerity Launch Configurations
\end_layout

\begin_layout Standard
Choose the program or URI.
\end_layout

\begin_layout Subsection
Debugging
\end_layout

\begin_layout Subsubsection
Breakpoints in Java Code
\end_layout

\begin_layout Subsubsection
Breakpoints in non-Java Code
\end_layout

\begin_layout Section
Packaging
\end_layout

\begin_layout Standard
There are two main reasons you would want to create Sincerity packages:
\end_layout

\begin_layout Enumerate
You've created a useful skeleton, skeleton add-on or plugin, which you would
 like to share with others for use in their Sincerity containers.
 A package, of course, is the most natural way to do so.
 You could then host your package on your own repository, or submit it for
 inclusion in other public repositories.
\end_layout

\begin_layout Enumerate
Packages are very useful for deploying your application internally, especially
 in ephemeral 
\begin_inset Quotes eld
\end_inset

cloud
\begin_inset Quotes erd
\end_inset

 environments.
 Programmers working on different modules could package their results, using
 a clear versioning system.
 You would then host the packages in your own private repository, using
 Nexus or even a plain directory.
 Deployment, including upgrades, would thus involve nothing more than running
 
\begin_inset Quotes eld
\end_inset

sincerity install
\begin_inset Quotes erd
\end_inset

 on the relevant containers.
 It also allows easy downgrading of applications, or setting modules to
 specific versions for testing and debugging.
\end_layout

\begin_layout Quote
Note that 
\begin_inset Quotes eld
\end_inset

packaging
\begin_inset Quotes erd
\end_inset

 here refers specifically to creating Sincerity packages, which you can
 then install into Sincerity containers as dependencies.
 If what you want is to distribute the entire container, then see the Distributi
on Plugin, and also the Sincerity Runtime Plugin.
\end_layout

\begin_layout Subsection
The Sincerity Packaging Plugin
\end_layout

\begin_layout Standard
\SpecialChar \ldots{}
does not exist yet, as of Sincerity 1.0-beta1.
 This is something on our roadmap, and technically entirely viable.
 The idea is to allow for a friendly GUI, as well as a strong CLI.
\end_layout

\begin_layout Standard
Until then, you can use Maven, as detailed below.
 It's slightly awkward, in that it requires editing complex XML files, but
 for the purpose of creating simple packages it should be very straightforward.
\end_layout

\begin_layout Subsection
How to Create a Sincerity Package Using Maven
\end_layout

\begin_layout Standard
It's relatively easy to use 
\begin_inset CommandInset href
LatexCommand href
name "Maven"
target "http://maven.apache.org/"

\end_inset

 to create a Sincerity package, with the help of the 
\begin_inset CommandInset href
LatexCommand href
name "maven-assembly-plugin"
target "http://maven.apache.org/plugins/maven-assembly-plugin/"

\end_inset

.
\end_layout

\begin_layout Standard
You can start with the following 
\begin_inset Quotes eld
\end_inset

pom.xml
\begin_inset Quotes erd
\end_inset

 file as a skeleton:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<?xml version="1.0" encoding="UTF-8"?>
\end_layout

\begin_layout Plain Layout

<project
\end_layout

\begin_layout Plain Layout

	xmlns="http://maven.apache.org/POM/4.0.0"
\end_layout

\begin_layout Plain Layout

	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
\end_layout

\begin_layout Plain Layout

	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v
4_0_0.xsd">
\end_layout

\begin_layout Plain Layout

	<modelVersion>4.0.0</modelVersion>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	<groupId>org.myorg.myapp</groupId>
\end_layout

\begin_layout Plain Layout

	<artifactId>myapp</artifactId>
\end_layout

\begin_layout Plain Layout

	<version>1.0.0</version>
\end_layout

\begin_layout Plain Layout

	<packaging>pom</packaging>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	<name>My Cool Application</name>
\end_layout

\begin_layout Plain Layout

	<description>This is an application packaged for use with Sincerity.</descriptio
n>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	<dependencies>
\end_layout

\begin_layout Plain Layout

		<dependency>
\end_layout

\begin_layout Plain Layout

			<groupId>com.threecrickets.savory</groupId>
\end_layout

\begin_layout Plain Layout

			<artifactId>savory-framework</artifactId>
\end_layout

\begin_layout Plain Layout

			<version>1.0-beta1</version>
\end_layout

\begin_layout Plain Layout

		</dependency>
\end_layout

\begin_layout Plain Layout

	</dependencies>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	<build>
\end_layout

\begin_layout Plain Layout

		<directory>cache</directory>
\end_layout

\begin_layout Plain Layout

		<plugins>
\end_layout

\begin_layout Plain Layout

			<plugin>
\end_layout

\begin_layout Plain Layout

				<groupId>org.apache.maven.plugins</groupId>
\end_layout

\begin_layout Plain Layout

				<artifactId>maven-assembly-plugin</artifactId>
\end_layout

\begin_layout Plain Layout

				<version>2.2.1</version>
\end_layout

\begin_layout Plain Layout

				<executions>
\end_layout

\begin_layout Plain Layout

					<execution>
\end_layout

\begin_layout Plain Layout

						<id>jar</id>
\end_layout

\begin_layout Plain Layout

						<phase>package</phase>
\end_layout

\begin_layout Plain Layout

						<goals>
\end_layout

\begin_layout Plain Layout

							<goal>single</goal>
\end_layout

\begin_layout Plain Layout

						</goals>
\end_layout

\begin_layout Plain Layout

						<configuration>
\end_layout

\begin_layout Plain Layout

							<appendAssemblyId>false</appendAssemblyId>
\end_layout

\begin_layout Plain Layout

							<archive>
\end_layout

\begin_layout Plain Layout

								<manifestEntries>
\end_layout

\begin_layout Plain Layout

									<Package-Folders>package</Package-Folders>
\end_layout

\begin_layout Plain Layout

								</manifestEntries>
\end_layout

\begin_layout Plain Layout

							</archive>
\end_layout

\begin_layout Plain Layout

							<descriptors>
\end_layout

\begin_layout Plain Layout

								<descriptor>package.xml</descriptor>
\end_layout

\begin_layout Plain Layout

							</descriptors>
\end_layout

\begin_layout Plain Layout

						</configuration>
\end_layout

\begin_layout Plain Layout

					</execution>
\end_layout

\begin_layout Plain Layout

				</executions>
\end_layout

\begin_layout Plain Layout

			</plugin>
\end_layout

\begin_layout Plain Layout

		</plugins>
\end_layout

\begin_layout Plain Layout

	</build>
\end_layout

\begin_layout Plain Layout

</project> 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Some things you'll want to customize:
\end_layout

\begin_layout Itemize
You can add as many dependencies as you like.
 Note that they can plain JVM jars, Sincerity packages, Python packages,
 Ruby gems, etc.: anything supported by Sincerity.
 In this case, we are including the Savory Framework, which is a Sincerity
 package (which in turn has dependencies).
 You can also have no dependencies at all.
\end_layout

\begin_layout Itemize
Under <manifestEntries> you can add anything that adheres to the packaging
 specification.
 For example, you may want to call a package installation script, like so:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<Package-Installer>com.threecrickets.sincerity.Sincerity delegate:start /libraries/
scripturian/installers/myapp/</Package-Installer>
\end_layout

\end_inset

(If you do so, you'll need a 
\begin_inset Quotes eld
\end_inset

libraries/scripturian/installers/myapp.js
\begin_inset Quotes erd
\end_inset

 file in your package, otherwise Sincerity will report an error when trying
 to install it.)
\end_layout

\begin_layout Itemize
The <directory> is a work directory used by Maven for creating your final
 package.
 You may want to specify it as 
\begin_inset Quotes eld
\end_inset

/tmp
\begin_inset Quotes erd
\end_inset

.
 It is relative to the location of the 
\begin_inset Quotes eld
\end_inset

pom.xml
\begin_inset Quotes erd
\end_inset

 file.
\end_layout

\begin_layout Itemize
If you want to share your package in a public repository, you'd likely want
 to add additional information about your package.
 Consult the Maven pom.xml guide for more options.
\end_layout

\begin_layout Standard
You will also need to create a 
\begin_inset Quotes eld
\end_inset

package.xml
\begin_inset Quotes erd
\end_inset

 file in the same directory:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<?xml version="1.0" encoding="UTF-8"?>
\end_layout

\begin_layout Plain Layout

<assembly
\end_layout

\begin_layout Plain Layout

	xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.2"
\end_layout

\begin_layout Plain Layout

	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
\end_layout

\begin_layout Plain Layout

	xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembl
y/1.1.2 http://maven.apache.org/xsd/assembly-1.1.2.xsd">
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	<id>jar</id>
\end_layout

\begin_layout Plain Layout

	<formats>
\end_layout

\begin_layout Plain Layout

		<format>jar</format>
\end_layout

\begin_layout Plain Layout

	</formats>
\end_layout

\begin_layout Plain Layout

	<baseDirectory>package</baseDirectory>
\end_layout

\begin_layout Plain Layout

	<fileSets>
\end_layout

\begin_layout Plain Layout

		<fileSet>
\end_layout

\begin_layout Plain Layout

			<directory>path-to-package</directory>
\end_layout

\begin_layout Plain Layout

			<outputDirectory>.</outputDirectory>
\end_layout

\begin_layout Plain Layout

			<includes>
\end_layout

\begin_layout Plain Layout

				<include></include>
\end_layout

\begin_layout Plain Layout

			</includes>
\end_layout

\begin_layout Plain Layout

		</fileSet>
\end_layout

\begin_layout Plain Layout

	</fileSets>
\end_layout

\begin_layout Plain Layout

</assembly>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
You'll want to change 
\begin_inset Quotes eld
\end_inset

path-to-package
\begin_inset Quotes erd
\end_inset

 to point to the base of your distribution directory.
 Note that it is relative to the location of 
\begin_inset Quotes eld
\end_inset

package.xml
\begin_inset Quotes erd
\end_inset

 file, and must have the final directory structure you want in the Sincerity
 container into which your package will be installed.
\end_layout

\begin_layout Standard
Note that you can create much more complex <fileSets> than this one.
 Consult the 
\begin_inset CommandInset href
LatexCommand href
name "assembly descriptor format documentation"
target "http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html"

\end_inset

 for more information.
\end_layout

\begin_layout Standard
You can now build and deploy your package into a local file repository by
 running the following Maven command from the directory in which you have
 your 
\begin_inset Quotes eld
\end_inset

pom.xml
\begin_inset Quotes erd
\end_inset

 file:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

mvn deploy -DaltDeploymentRepository=myrepo::default::file:/path-to-local-reposi
tory/
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that if this is the first time you've run Maven, it will take some
 time to download all the necessary plugins it needs.
 Consequent runs will be much faster.
\end_layout

\begin_layout Standard
Of course, you can also deploy to a repository server, such as Nexus, which
 you can easily install with Sincerity's Nexus skeleton.
 You can also configure Maven to always use a default target repository
 for deployment.
\end_layout

\begin_layout Standard
Maven is a complex tool that can do a whole lot more than this, but this
 should get you started.
\end_layout

\begin_layout Standard
[Add note about support for -SNAPSHOT]
\end_layout

\begin_layout Section
Repositories
\end_layout

\begin_layout Standard
Sincerity can work with a any arbitrary repository for which it has the
 supported technology.
 That said, here's an overview of some repositories that you are most likely
 to work with:
\end_layout

\begin_layout Subsubsection
The Three Crickets Repository
\end_layout

\begin_layout Subsubsection
iBiblio/Maven Repositories
\end_layout

\begin_layout Subsubsection
Python and PyPI (a.k.a.
 
\begin_inset Quotes eld
\end_inset

The Cheese Factory
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Subsubsection
Ruby and Gems
\end_layout

\begin_layout Subsubsection
PHP and PEAR
\end_layout

\begin_layout Subsubsection
Community Repositories
\end_layout

\begin_layout Section
Specifications
\end_layout

\begin_layout Subsection
Sincerity Packages
\end_layout

\begin_layout Standard
Packages are collections of artifacts.
 They are defined using special tags in standard JVM resource manifests.
 Additionally, packages support special install/uninstall hooks for calling
 arbitrary entry points, allowing for custom behavior.
 Indeed, a package can include no artifacts, and only implement these hooks.
\end_layout

\begin_layout Standard
Packages allow you to work around various limitations in repositories such
 as iBiblio/Maven, in which the smallest deployable unit is a Jar.
 The package specification allows you to include as many files as you need
 in a single Jar, greatly simplifying your deployment scheme.
\end_layout

\begin_layout Standard
Note that two different ways are supported for specifying artifacts: they
 can specified as files, thus referring to actual zipped entries with the
 Jar file in which the manifest resides, or that can be specified as general
 resources, in which case they will be general resource URLs to be loaded
 by the classloader, and thus they can reside anywhere in the classpath.
\end_layout

\begin_layout Standard
Also note what 
\begin_inset Quotes eld
\end_inset

volatile
\begin_inset Quotes erd
\end_inset

 means in this context: a 
\begin_inset Quotes eld
\end_inset

volatile
\begin_inset Quotes erd
\end_inset

 artifact is one that should be installed once and only once.
 This means that subsequent attempts to install the package, beyond the
 first, should ignore these artifacts.
 This is useful for marking configuration files, example files, and other
 files that the user should be allow to delete without worrying that they
 would reappear on every change to the dependency structure.
\end_layout

\begin_layout Standard
Supported manifest tags:
\end_layout

\begin_layout Itemize

\series bold
Package-Files
\series default
: a comma separated list of file paths within this Jar.
\end_layout

\begin_layout Itemize

\series bold
Package-Folders:
\series default
 a comma separated list of folder paths within this Jar.
 Specifies all artifacts under these folders, recursively.
\end_layout

\begin_layout Itemize

\series bold
Package-Resources
\series default
: a comma separated list of resource paths to be retrieved via the classloader.
\end_layout

\begin_layout Itemize

\series bold
Package-Volatile-Files
\series default
: all these artifacts will be marked as volatile.
\end_layout

\begin_layout Itemize

\series bold
Package-Volatile-Folders
\series default
: all artifacts under these paths will be marked as volatile.
\end_layout

\begin_layout Itemize

\series bold
Package-Installer
\series default
: specifies a class name which has a main() entry point.
 Simple string arguments can be optionally appended, separated by spaces.
 The installer will be called when the package is to be installed, 
\emph on
after
\emph default
 all artifacts have been unpacked.
 Any thrown exception would cause installation to fail.
\end_layout

\begin_layout Itemize

\series bold
Package-Uninstaller
\series default
: specifies a class name which has a main() entry point.
 Simple string arguments can be optionally appended, separated by spaces.
 The uninstaller will be called when the package is to be uninstalled.
\end_layout

\end_body
\end_document
