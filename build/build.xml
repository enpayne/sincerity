<?xml version="1.0"?>
<project name="Sincerity" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">

	<property file="component.properties" />

	<property name="component.source" value="../components/${component}/source" />
	<property name="component.resources" value="../components/${component}/resources" />
	<property name="component.notices" value="../components/notices" />
	<property name="reference" value="../components/reference" />
	<property name="scripts" value="../components/scripts" />
	<property name="sincerity-javascript-library" value="../components/sincerity-javascript-library" />
	<property name="templates" value="../components/templates" />
	<property name="eclipsePlugin" value="../components/eclipse-plugin/plugin" />
	<property name="agent" value="../components/firewall-friendly-agent" />

	<property name="dependencies" value="../dependencies" />

	<property name="cache" value="./cache" />
	<property name="cache.classes" value="${cache}/classes" />
	<property name="cache.eclipsePlugin" value="${cache}/eclipse-plugin" />
	<property name="cache.agent" value="${cache}/agent" />
	<property name="cache.jars" value="${cache}/jars" />

	<property name="distribution" value="./distribution" />
	<property name="distribution.content" value="${distribution}/content" />
	<property name="distribution.libraries" value="${distribution.content}/libraries" />
	<property name="distribution.jars" value="${distribution.libraries}/jars/${maven.group}/${maven.artifact}/${version}" />
	<property name="distribution.jars.pattern" value="${distribution.libraries}/jars/[organisation]/[module]/[revision](/[branch])/[artifact](.[ext])" />
	<property name="distribution.reference" value="${distribution.content}/reference" />
	<property name="distribution.api" value="${distribution.reference}/api/${maven.group}/${maven.artifact}/${version}" />
	<property name="distribution.manual" value="${distribution.reference}/manuals/${maven.group}/${maven.artifact}/${version}" />
	<property name="distribution.source" value="${distribution.reference}/source/${maven.group}/${maven.artifact}/${version}" />
	<property name="distribution.templates" value="${distribution.content}/templates" />
	<property name="distribution.eclipsePlugin" value="${distribution}/eclipse-plugin" />
	<property name="distribution.agent" value="${distribution}/firewall-friendly-agent" />

	<taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpath="${dependencies}/libraries/jars/org.apache.ivy/ivy/${ivy.version}/ivy.jar" />
	<taskdef name="izpack" classname="com.izforge.izpack.ant.IzPackTask" classpath="izpack/izpack-standalone-compiler.jar" />

	<target name="ivy" description="Settings for Ivy">
		<ivy:settings file="ivy/settings.xml" />
	</target>

	<target name="dependencies" depends="ivy" description="Resolve dependencies">
		<ivy:resolve file="ivy/${component}.xml" type="jar" log="download-only" resolveId="${component}" />
		<ivy:cachepath pathid="dependencies-ivy" type="jar" resolveId="${component}" />
		<path id="dependencies">
			<path refid="dependencies-ivy" />
			<fileset dir="${dependencies}" />
		</path>
	</target>

	<target name="classes" depends="dependencies" description="Compile Java code">
		<mkdir dir="${cache.classes}" />
		<javac srcdir="${component.source}" destdir="${cache.classes}" source="${jvm.version}" target="${jvm.version}" includeAntRuntime="yes" debug="${compile.debug}">
			<classpath refid="dependencies" />
		</javac>
		<copy todir="${cache.classes}">
			<fileset dir="${component.resources}" />
		</copy>
		
		<mkdir dir="${cache.agent}" />
		<javac srcdir="${agent}/source" destdir="${cache.agent}" source="${jvm.version}" target="${jvm.version}" includeAntRuntime="no" debug="${compile.debug}" />
		
		<mkdir dir="${cache.eclipsePlugin}" />
		<javac srcdir="${eclipsePlugin}/src" destdir="${cache.eclipsePlugin}" source="${jvm.version}" target="${jvm.version}" includeAntRuntime="no" debug="${compile.debug}">
			<classpath>
				<fileset dir="${eclipse}/plugins" includes="**/*.jar" />
			</classpath>
		</javac>
		<copy todir="${cache.eclipsePlugin}">
			<fileset dir="${eclipsePlugin}" includes="icons/**, schema/**, plugin.xml" />
		</copy>
	</target>

	<target name="version">
		<mkdir dir="${cache.classes}" />
		<propertyfile file="${cache.classes}/com/threecrickets/sincerity/version.conf">
			<entry key="version" value="${version}" />
			<entry key="built" type="date" value="now" pattern="MMM dd yyyy, HH:mm:ss, 'TZ'Z" />
		</propertyfile>
	</target>

	<target name="javadocs" description="Create API documentation if not present">
		<available file="${distribution.api}" property="javadocs-present" />
		<antcall target="javadocs-overwrite" />
	</target>

	<target name="javadocs-overwrite" depends="dependencies" description="Create API documentation" unless="javadocs-present">
		<javadoc destdir="${distribution.api}" sourcepath="${component.source}" excludepackagenames="**.internal.*" access="protected" source="${jvm.version}" windowtitle="${documentation.title} ${version}" doctitle="${documentation.title} ${version}" author="true" splitindex="true" use="true" version="true" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false">

			<link href="${jvm.docs}" />
			<!-- Apache Commons VFS 1.0 has no online javadocs -->
			<link href="http://jsoup.org/apidocs/" />
			<link href="http://threecrickets.com/scripturian/api/" />
			<link href="http://www.mozilla.org/rhino/apidocs/" />
			<classpath refid="dependencies" />
			<bottom>
				<![CDATA[<i>${documentation.copyright}</i>]]>
			</bottom>
		</javadoc>
	</target>

	<target name="manual" description="Create manual if not present">
		<available file="${distribution.manual}" property="manual-present" />
		<antcall target="manual-overwrite" />
	</target>
	
	<target name="clean-manual" description="Clean manual">
		<delete dir="${distribution.manual}" />
	</target>
	
	<target name="manual-lyx" if="lyx">
		<exec executable="${lyx}" failifexecutionfails="false">
			<arg value="--export" />
			<arg value="pdf" />
			<arg value="${distribution.manual}/${component}_manual.lyx" />
		</exec>
	</target>
	
	<target name="manual-elyxer" if="elyxer">
		<exec executable="${elyxer}" failifexecutionfails="false">
			<arg value="--unicode" />
			<arg value="--title" />
			<arg value="${documentation.title} Manual" />
			<arg value="${distribution.manual}/${component}_manual.lyx" />
			<arg value="${distribution.manual}/${component}_manual.html" />
		</exec>
	</target>
	
	<target name="manual-overwrite" description="Create manual" unless="manual-present">
		<mkdir dir="${distribution.manual}" />
		<copy todir="${distribution.manual}">
			<fileset dir="${reference}/manual" excludes="*~" />
		</copy>
		<replace dir="${distribution.manual}" includes="${component}_manual.lyx" token="%VERSION%" value="${version}" />
		<antcall target="manual-lyx" />
		<antcall target="manual-elyxer" />
	</target>
	
	<target name="libraries" depends="classes, version" description="Create jars">
		<mkdir dir="${distribution.jars}" />
		<jar destfile="${distribution.jars}/${maven.artifact}.jar" basedir="${cache.classes}" excludes="com/threecrickets/bootstrap/*" />
		<jar destfile="${distribution.content}/bootstrap.jar" basedir="${cache.classes}" includes="com/threecrickets/bootstrap/*">
			<manifest>
				<attribute name="Main-Class" value="com.threecrickets.bootstrap.Bootstrap" />
			</manifest>
		</jar>

		<mkdir dir="${distribution.agent}" />
		<jar destfile="${distribution.agent}/firewall-friendly-agent.jar" basedir="${cache.agent}" manifest="${agent}/resources/META-INF/MANIFEST.MF" />

		<jar destfile="${distribution.eclipsePlugin}/sincerity-eclipse-plugin.jar" basedir="${cache.eclipsePlugin}" manifest="${eclipsePlugin}/META-INF/MANIFEST.MF" />
	</target>
	
	<target name="distribution" depends="libraries, javadocs, manual" description="Assemble distribution">
		<ivy:retrieve type="jar" pattern="${distribution.jars.pattern}" log="quiet" resolveId="${component}" />
		<copy todir="${distribution.source}">
			<fileset dir="${component.source}" />
		</copy>
		<copy todir="${distribution.content}">
			<fileset dir="${component.notices}" />
			<fileset dir="${scripts}" excludes="*.old" />
			<fileset dir="${dependencies}" />
			<fileset dir="${sincerity-javascript-library}" />
		</copy>
		<copy todir="${distribution.templates}">
			<fileset dir="${templates}" />
		</copy>
		<chmod perm="ugo+rx">
			<fileset dir="${distribution.content}" includes="sincerity" />
		</chmod>
	</target>
	
	<target name="package" depends="distribution" description="Create distribution package">
		<zip destfile="${distribution}/${component}-${version}.zip">
			<fileset dir="${distribution.content}" />
		</zip>
	</target>
	
	<target name="izpack-installer" depends="package" description="Create IzPack installer">
		<izpack basedir="${basedir}" input="${basedir}/izpack/${component}.xml" output="${distribution}/${component}-${version}-install.jar" inheritAll="true" installerType="standard" />
	</target>
	
	<target name="build" depends="package" description="Build distribution" />
	
	<target name="clean" description="Clean">
		<delete dir="${cache}" />
		<delete dir="${distribution}" />
	</target>
	
	<target name="rebuild" depends="clean, build" description="First clean and then build distribution" />

</project>
